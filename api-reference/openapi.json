{
   "openapi":"3.1.0",
   "info":{
      "title":"Apigene",
      "description":"Apigene API",
      "version":"1.0.0",
      "contact":{
         "name":"Apigene Support",
         "url":"https://app.apigene.ai",
         "email":"support@apigene.ai"
      }
   },
   "paths":{
      "/api/health":{
         "get":{
            "tags":[
               "System"
            ],
            "summary":"Health Check",
            "operationId":"health_check_api_health_get",
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/version":{
         "get":{
            "tags":[
               "System"
            ],
            "summary":"Get Version",
            "operationId":"get_version_api_version_get",
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/spec_from_url/":{
         "post":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Create From Url",
            "operationId":"spec_create_from_url",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/SpecFromUrlData"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/spec_from_file/":{
         "post":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Create From File",
            "description":"Create spec from uploaded file.",
            "operationId":"spec_create_from_file",
            "requestBody":{
               "content":{
                  "multipart/form-data":{
                     "schema":{
                        "$ref":"#/components/schemas/Body_spec_create_from_file"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/spec/{api_name}":{
         "get":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Get",
            "description":"Get information about a specific spec.\n\nRetrieves detailed information about a spec identified by its API name.\n\nParameters:\n- api_name (str): The name of the spec to retrieve information for.\n\nReturns:\n- SpecInfo: Information about the specified spec.\n\nRaises:\n- HTTPException(404): If the spec with the provided API name is not found.\n- HTTPException(500): If an error occurs while fetching the spec information.",
            "operationId":"spec_get",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/SpecInfo"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         },
         "delete":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Delete",
            "description":"Delete a spec by its API name.\n\nDeletes the spec identified by its API name. Requires authentication.\n\nParameters:\n- api_name (str): The name of the spec to delete.\n\nReturns:\n- dict: A confirmation message if the spec is deleted successfully.\n\nRaises:\n- HTTPException(404): If the spec with the provided API name is not found.\n- HTTPException(500): If an error occurs while deleting the spec.",
            "operationId":"spec_delete",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/schema":{
         "get":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Get Schema",
            "description":"Get a specific spec schema.\n\nRetrieves the schema of a spec identified by its API name.\n\nParameters:\n- api_name (str): The name of the spec to retrieve information for.\n- current_user (dict): The current user making the request. Retrieved using dependency injection.\n\nReturns:\n- The OpenAPI spec in JSON format\n\nRaises:\n- HTTPException(404): If the spec with the provided API name is not found.\n- HTTPException(500): If an error occurs while fetching the spec information.",
            "operationId":"spec_get_schema",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/specs":{
         "get":{
            "tags":[
               "Spec"
            ],
            "summary":"Specs List",
            "description":"List all available specs.\n\nRetrieves a list of all available spec names or detailed information about each spec.\n\nParameters:\n- current_org (AuthOrg): The current org making the request. Retrieved using dependency injection.\n- include_all (bool, optional): Flag to include detailed information about each spec. Defaults to False.\n\nReturns:\n- Union[List[str], List[SpecInfo]]: A list of spec names or detailed information about each spec.\n\nRaises:\n- HTTPException(500): If an error occurs while fetching the specs.",
            "operationId":"specs_list",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"include_all",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"boolean"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "default":false,
                     "title":"Include All"
                  }
               },
               {
                  "name":"only_configured",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"boolean"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "default":false,
                     "title":"Only Configured"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "anyOf":[
                              {
                                 "type":"array",
                                 "items":{
                                    "type":"object",
                                    "additionalProperties":true
                                 }
                              },
                              {
                                 "type":"array",
                                 "items":{
                                    "$ref":"#/components/schemas/SpecInfo"
                                 }
                              }
                           ],
                           "title":"Response Specs List"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/update":{
         "post":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Update",
            "description":"Update a spec with new information.\n\nUpdates an existing spec with new information provided in the payload.\n\nParameters:\n- api_name (str): The name of the spec to update.\n- payload (SpecInfo): The new information to update the spec with.\n- current_user (dict): The current user making the request. Retrieved using dependency injection.\n\nReturns:\n- dict: A confirmation message if the spec is updated successfully.\n\nRaises:\n- HTTPException(500): If an error occurs while updating the spec.",
            "operationId":"spec_update",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/SpecInfo"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/summary":{
         "post":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Summary",
            "operationId":"spec_summary",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/SpecSummaryPayload"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/use_cases":{
         "post":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Use Cases",
            "operationId":"spec_use_cases",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/SpecUseCasesPayload"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/operations":{
         "get":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Operations",
            "description":"List operations for the specified spec.\n\nRetrieves a list of operations for the specified spec identified by its API name.\n\nParameters:\n- api_name (str): The name of the spec to list operations for.\n- current_user (dict): The current user making the request. Retrieved using dependency injection.\n\nReturns:\n- List[dict]: List of operations or error detail.\n\nRaises:\n- HTTPException(500): If an error occurs while listing operations.",
            "operationId":"spec_operations",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/available_scopes":{
         "get":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Scopes",
            "description":"List available scopes for the specified spec.\n\nRetrieves a list of available scopes for the specified spec identified by its API name.\n\nParameters:\n- api_name (str): The name of the spec to list operations for.\n- current_user (dict): The current user making the request. Retrieved using dependency injection.\n\nReturns:\n- List[dict]: List of scopes or error detail.\n\nRaises:\n- HTTPException(500): If an error occurs while listing operations.",
            "operationId":"spec_available_scopes",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/insigths":{
         "get":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Insights",
            "description":"List spec insights for the specified spec.\n\nRetrieves a list of operations for the specified spec identified by its API name.\n\nParameters:\n- api_name (str): The name of the spec to list operations for.\n- current_user (AuthUser): The current user making the request. Retrieved using dependency injection.\n\nReturns:\n- List[dict]: List of operations or error detail.\n\nRaises:\n- HTTPException(500): If an error occurs while listing operations.",
            "operationId":"spec_insights",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/operation_examples":{
         "post":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Operation Examples",
            "description":"Generate examples for a specific operation of the specified spec.\n\nGenerates examples for a specific operation of the specified spec identified by its API name.\nOptionally specify the operation name, count, and index.\n\nParameters:\n- api_name (str): The name of the spec to generate examples for.\n  examples for.\n- payload (SpecExamplePayload): Payload containing operation name, count, and index flags.\n- current_user (AuthUser): The current user making the request. Retrieved using dependency injection.\n\nReturns:\n- dict: Examples or error detail.\n\nRaises:\n- HTTPException(500): If an error occurs while generating the examples.",
            "operationId":"spec_operation_examples",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/SpecExamplePayload"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/operation_user_input_template":{
         "post":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Operation User Input Template",
            "description":"Generate user_input_template for a specific operations of the specified spec.\n\nGenerates user_input_template for a specific operation of the specified spec identified by its API name.\nOptionally specify the operation name, count, and index.\n\nParameters:\n- api_name (str): The name of the spec to generate examples for.\n  examples for.\n- payload (SpecExamplePayload): Payload containing operation name, count, and index flags.\n- current_user (AuthUser): The current user making the request. Retrieved using dependency injection.\n\nReturns:\n- dict: Examples or error detail.\n\nRaises:\n- HTTPException(500): If an error occurs while generating the examples.",
            "operationId":"spec_operation_user_input_template",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/SpecExamplePayload"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/operation_add_example":{
         "post":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Operation Add Examples",
            "description":"Add user generate example to the vector store index.\n\nParameters:\n- api_name (str): The name of the spec to generate examples for.\n- payload (SpecOperationAddExamplePayload): Payload containing operation name,and the user_input.\n- current_user (AuthUser): The current user making the request. Retrieved using dependency injection.\n\nReturns:\n- Status code 200 or an error.\n\nRaises:\n- HTTPException(500): If an error occurs while generating the examples.",
            "operationId":"spec_operation_add_examples",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/SpecOperationAddExamplesPayload"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/reindex":{
         "post":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Reindex",
            "description":"Re-index the specified spec's functions.\n\nRe-indexes the functions of the specified spec identified by its API name.\nOptionally specify whether to drop the existing index.\n\nParameters:\n- api_name (str): The name of the spec to re-index.\n- payload (SpecReindexPayload): Payload containing the drop flag.\n- current_user (AuthUser): The current user making the request. Retrieved using dependency injection.\n\nReturns:\n- dict: Re-indexing confirmation message or error detail.\n\nRaises:\n- HTTPException(500): If an error occurs while re-indexing the functions.",
            "operationId":"spec_reindex",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/SpecReindexPayload"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/create_agentic_metadata":{
         "post":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Create Agentic Metadata",
            "description":"Create agentic metadata for the specified spec.\n\nParameters:\n- api_name (str): The name of the spec to re-index.\n\nReturns:\n- dict: confirmation message or error detail.\n\nRaises:\n- HTTPException(500): If an error occurs while re-indexing the functions.",
            "operationId":"spec_create_agentic_metadata",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "type":"array",
                        "items":{
                           "type":"string"
                        },
                        "title":"Operationids"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/agentic_metadata":{
         "get":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Get Agentic Metadata",
            "description":"Create agentic metadata for the specified spec.\n\nParameters:\n- api_name (str): The name of the spec to re-index.\n\nReturns:\n- list: Filtered agentic metadata entries where the corresponding operation is enabled.\n\nRaises:\n- HTTPException(500): If an error occurs while re-indexing the functions.",
            "operationId":"spec_get_agentic_metadata",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               },
               {
                  "name":"max_count",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"integer",
                     "default":20,
                     "title":"Max Count"
                  }
               },
               {
                  "name":"partial",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"boolean",
                     "default":true,
                     "title":"Partial"
                  }
               },
               {
                  "name":"enabled_only",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"boolean",
                     "default":true,
                     "title":"Enabled Only"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/agentic_metadata_common_parameteres":{
         "get":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Get Agentic Metadata Common Parameteres",
            "description":"Get agentic metadata common parameteres for the specified spec.\n\nParameters:\n- api_name (str): The name of the spec to re-index.\n\nReturns:\n- dict: confirmation message or error detail.\n\nRaises:\n- HTTPException(500): If an error occurs while re-indexing the functions.",
            "operationId":"spec_get_agentic_metadata_common_parameteres",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/update_agentic_metadata":{
         "put":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Update Agentic Metadata",
            "description":"Update agentic metadata for the specified spec.\n\nParameters:\n- api_name (str): The name of the spec to update.\n- agentic_metadata (dict): The metadata to be written.\n\nReturns:\n- dict: Confirmation message or error detail.\n\nRaises:\n- HTTPException(500): If an error occurs while updating the metadata.",
            "operationId":"spec_update_agentic_metadata",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "type":"object",
                        "additionalProperties":true,
                        "title":"Agentic Metadata"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{task_id}/reindex_status":{
         "get":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Reindex Status",
            "description":"Retrieve the status of a re-indexing task.\n\nChecks the status of the specified re-indexing task identified by the task_id.\n\nParameters:\n- task_id (str): The ID of the task to retrieve the status for.\n- current_user (AuthUser): The current user making the request. Retrieved using dependency injection.\n\nReturns:\n- dict: Task status and additional information.\n\nRaises:\n- HTTPException(404): If the task ID is not found.",
            "operationId":"spec_reindex_status",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"task_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Task Id"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/spec/{api_name}/operation_schema":{
         "post":{
            "tags":[
               "Spec"
            ],
            "summary":"Spec Operation Schema",
            "description":"Returns the spec for a given operation.\n\nParameters:\n- api_name (str): The name of the spec to list operations for.\n- operation_name(str): The name of the operation to get the spec for.\n- current_user (dict): The current user making the request. Retrieved using dependency injection.\n\nReturns:\n- List[dict]: List of operations or error detail.\n\nRaises:\n- HTTPException(500): If an error occurs while listing operations.",
            "operationId":"spec_operation_schema",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "type":"string",
                        "title":"Operation Name"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/interaction/create":{
         "post":{
            "tags":[
               "Interaction"
            ],
            "summary":"Interaction Create",
            "description":"Create an interaction.\n\nThis endpoint allows you to create an interaction with the specified data.\n\nParameters:\n- data: Input data for the interaction.\n- api_key: API key for authentication.\n\nReturns:\n- List of action results.\n\nRaises:\n- HTTPException(401): If the provided API key is invalid.",
            "operationId":"interaction_create",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/InteractionInput"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "items":{
                              "$ref":"#/components/schemas/ActionResult"
                           },
                           "type":"array",
                           "title":"Response Interaction Create"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/interaction/list":{
         "post":{
            "tags":[
               "Interaction"
            ],
            "summary":"List Interactions",
            "description":"List interactions metadata (optimized for table display).\n\nThis endpoint returns only metadata for interactions to improve performance.\nUse /interaction/{interaction_id} to get full interaction details.\n\nParameters:\n- api_name: Name of the API (optional).\n- page: Page number for pagination (default: 1).\n- limit: Maximum number of interactions per page (default: 50).\n- sort_by: Field to sort interactions by (optional).\n- sort_order: Sorting order ('asc' or 'desc') (default: 'asc').\n- filters: Additional filters for querying interactions (optional).\n- current_user: Current user for authentication (required for admin role).\n\nReturns:\n- List of interaction metadata (without large response data).\n\nRaises:\n- HTTPException(401): If the user is not authorized.",
            "operationId":"list_interactions",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "title":"Api Name"
                  }
               },
               {
                  "name":"page",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"integer",
                     "default":1,
                     "title":"Page"
                  }
               },
               {
                  "name":"limit",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"integer",
                     "default":50,
                     "title":"Limit"
                  }
               },
               {
                  "name":"sort_by",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "title":"Sort By"
                  }
               },
               {
                  "name":"sort_order",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "default":"asc",
                     "title":"Sort Order"
                  }
               }
            ],
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "anyOf":[
                           {
                              "type":"object",
                              "additionalProperties":true
                           },
                           {
                              "type":"null"
                           }
                        ],
                        "title":"Filters"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/InteractionCountResponse"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/interaction/{interaction_id}":{
         "get":{
            "tags":[
               "Interaction"
            ],
            "summary":"Get Interaction Detail",
            "description":"Get detailed interaction data by ID.\n\nThis endpoint returns the full interaction data including request/response details.\nUse this endpoint when you need to view the complete interaction information.\n\nParameters:\n- interaction_id: Unique identifier of the interaction.\n- current_user: Current user for authentication (required for admin role).\n\nReturns:\n- Full interaction data including request/response details.\n\nRaises:\n- HTTPException(404): If the interaction is not found.\n- HTTPException(401): If the user is not authorized.",
            "operationId":"get_interaction_detail",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"interaction_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Interaction Id"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/Interaction"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/interaction/summary":{
         "post":{
            "tags":[
               "Interaction"
            ],
            "summary":"Get Summary",
            "description":"Endpoint to retrieve summarized interaction counts over a specified date range, grouped by daily, weekly, or monthly intervals.\nOptionally filters by API titles and supports flexible time granularity in results.\n\nArgs:\n    request (SummaryRequest): The request body containing filter options:\n        - start_date (datetime): Start date of the summary range.\n        - end_date (datetime): End date of the summary range.\n        - api_title (List[str], optional): List of API titles to filter by.\n        - time_frame (str, optional): Time granularity - 'daily', 'weekly', or 'monthly'.\n\nReturns:\n    dict: A dictionary mapping time buckets (daily/weekly/monthly) to counts of interactions,\n          either grouped by API title or as a total count.\n\nExample Response:\n    {\n        \"2024-04-01\": {\"API A\": 12, \"API B\": 8},\n        \"2024-04-02\": {\"API A\": 9, \"API B\": 5}\n    }",
            "operationId":"get_summary",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/SummaryRequest"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/user/signup/":{
         "post":{
            "tags":[
               "User"
            ],
            "summary":"User Signup",
            "description":"Endpoint for user registration.\n\nThis endpoint allows users to sign up by providing necessary user data.\nUpon successful registration, a new user is created and added to the database.\nIf the user role is APIGENE, an organization is created for the user.\n\nParameters:\n- user_data: UserCreate - Data required to create a new user.\n\nReturns:\n- dict: A dictionary containing a success message upon successful user creation.",
            "operationId":"user_signup",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/UserCreate"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/user/me":{
         "get":{
            "tags":[
               "User"
            ],
            "summary":"User Me",
            "description":"Endpoint to retrieve information about the currently authenticated user.\n\nReturns user metadata including email, name, role, organization info, trial expiration, onboarding status,\nand enabled features based on the organization's tier.\n\nArgs:\n\nReturns:\n    UserInfo: A dictionary containing user and organization-specific metadata.",
            "operationId":"user_me",
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/UserInfo"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/user/token":{
         "post":{
            "tags":[
               "User"
            ],
            "summary":"User Token",
            "description":"Endpoint to obtain an access token for authentication.\n\nAuthenticates the user via form-encoded credentials (`username` and `password`) and returns a bearer token.\nThis token can be used in the `Authorization` header for accessing protected endpoints.\n\nArgs:\n    form_data (OAuth2PasswordRequestForm): Includes `username` (email) and `password` as form fields.\n\nReturns:\n    Token: An access token in bearer format.\n\nRaises:\n    HTTPException 401: If the username or password is invalid.\n    HTTPException 500: If token creation fails due to internal error.",
            "operationId":"user_token",
            "requestBody":{
               "content":{
                  "application/x-www-form-urlencoded":{
                     "schema":{
                        "$ref":"#/components/schemas/Body_user_token"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/Token"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/user/settings":{
         "get":{
            "tags":[
               "User"
            ],
            "summary":"Retrieve User settings",
            "description":"This endpoint retrieves a user settings configuration.",
            "operationId":"settings_get",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"field",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"array",
                           "items":{
                              "type":"string"
                           }
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "title":"Field"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "type":"object",
                           "additionalProperties":true,
                           "title":"Response Settings Get"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/user/settings/update":{
         "post":{
            "tags":[
               "User"
            ],
            "summary":"Settings Update",
            "description":"Endpoint to update user-specific settings.\n\nCompares the provided settings with existing stored settings for the authenticated user.\nIf changes are detected, the settings are updated accordingly. If no settings exist,\na new settings record is created for the user.\n\nArgs:\n    payload (Settings): A `Settings` object containing updated user preferences or values.\n\nReturns:\n    dict: A confirmation message indicating whether the settings were updated or skipped.\n\nRaises:\n    HTTPException 500: If a runtime error occurs during update.",
            "operationId":"settings_update",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/Settings"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/org/add_user/":{
         "post":{
            "tags":[
               "Org"
            ],
            "summary":"Org Add User",
            "description":"Endpoint for an organization admin to add a new user to their organization.\n\nArgs:\n    user_data (UserCreate): The new user information including email, name, role, and org_name.\n\nReturns:\n    dict: A success message confirming the user was added to the organization.\n\nRaises:\n    HTTPException 404:\n        - If the organization database is not found.\n        - If the `org_name` in user data doesn't match the admin's org.\n        - If organization details are not initialized.\n    HTTPException 409:\n        - If the user already exists globally.\n        - If the user is already a member of the organization.\n    HTTPException 500:\n        - If any unexpected error occurs during the user addition process.",
            "operationId":"org_add_user",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/UserCreate"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/org/remove_user/{username}":{
         "delete":{
            "tags":[
               "Org"
            ],
            "summary":"Org Remove User",
            "description":"Endpoint for organization admins to remove a user from their organization.\n\nArgs:\n    username (str): The email of the user to be removed from the organization.\n\nReturns:\n    dict: A message confirming successful removal of the user.\n\nRaises:\n    HTTPException 404:\n        - If the organization or the specified user is not found.\n    HTTPException 409:\n        - If the user does not belong to the organization.\n    HTTPException 500:\n        - If an internal error occurs during the removal process.",
            "operationId":"org_remove_user",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"username",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Username"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/org/create/":{
         "post":{
            "tags":[
               "Org"
            ],
            "summary":"Org Create",
            "operationId":"org_create",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"tier",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "$ref":"#/components/schemas/OrganizationTier"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/org/delete/{org_name}":{
         "delete":{
            "tags":[
               "Org"
            ],
            "summary":"Org Delete",
            "description":"Endpoint to delete an organization and all its associated data.\nThis operation is restricted to root-level users only.\n\nArgs:\n    org_name (str): The name (or ID) of the organization to delete.\n\nReturns:\n    dict: A success message confirming the organization deletion.\n\nRaises:\n    HTTPException 404: If the deletion fails due to the organization not existing or an internal error.",
            "operationId":"org_delete",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"org_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Org Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/org/{org_name}/generate_token":{
         "post":{
            "tags":[
               "Org"
            ],
            "summary":"Org Generate Token",
            "description":"Endpoint for organization admins to generate an access token scoped to their organization.\n\nArgs:\n    org_name (str): The name (or ID) of the organization for which the token is being generated.\n    expiry_duration (Optional[int]): Token expiry duration in seconds. If not provided, uses default expiry.\n\nReturns:\n    dict: A dictionary containing the `org_token`.\n\nRaises:\n    HTTPException 403: If the current user is not authorized to manage the specified organization.",
            "operationId":"org_generate_token",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"org_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Org Name"
                  }
               },
               {
                  "name":"expiry_duration",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"integer"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Token expiry duration in seconds (optional)",
                     "title":"Expiry Duration"
                  },
                  "description":"Token expiry duration in seconds (optional)"
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/org/details/{org_name}":{
         "get":{
            "tags":[
               "Org"
            ],
            "summary":"Org Get Details",
            "description":"Endpoint to retrieve full organization details, including metadata and member information.\nAccess is restricted to organization admins.\n\nArgs:\n    org_name (str): The name (or ID) of the organization to retrieve details for.\n\nReturns:\n    dict: A dictionary containing organization details and an array of member metadata.\n\nRaises:\n    HTTPException 403: If the user is not authorized to manage the specified organization.\n    HTTPException 404: If the organization or its details do not exist.",
            "operationId":"org_get_details",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"org_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Org Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/org/settings":{
         "get":{
            "tags":[
               "Org"
            ],
            "summary":"Retrieve Organization settings",
            "description":"This endpoint retrieves an organization's settings configuration.",
            "operationId":"org_settings_get",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"field",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"array",
                           "items":{
                              "type":"string"
                           }
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "title":"Field"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "type":"object",
                           "additionalProperties":true,
                           "title":"Response Org Settings Get"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/org/settings/update":{
         "post":{
            "tags":[
               "Org"
            ],
            "summary":"Org Settings Update",
            "operationId":"org_settings_update",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/OrgSettings"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/gpt/{genai_app}/delete":{
         "delete":{
            "tags":[
               "GPT"
            ],
            "summary":"Gpt Delete",
            "description":"Endpoint to delete a specific GPT instance by name for the current tenant.\n\nArgs:\n    genai_app (str): The unique name identifier of the GPT to be deleted.\n\nReturns:\n    dict: A message confirming the deletion of the GPT instance.",
            "operationId":"gpt_delete",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Genai App"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/gpts/list":{
         "get":{
            "tags":[
               "GPT"
            ],
            "summary":"Gpts List",
            "description":"Endpoint to list GPTs based on inclusion flags for private and public GPTs.\n\nArgs:\n    include_private_gpts (bool): Whether to include private GPTs in the response.\n    include_public_gpts (bool): Whether to include public GPTs in the response.\n    tenant (Tenant): Tenant dependency injection for accessing database operations.\n\nReturns:\n    List[dict]: A list of GPT details.",
            "operationId":"gpts_list",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"include_private_gpts",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"boolean",
                     "default":true,
                     "title":"Include Private Gpts"
                  }
               },
               {
                  "name":"include_public_gpts",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"boolean",
                     "default":true,
                     "title":"Include Public Gpts"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/gpts/explore":{
         "get":{
            "tags":[
               "GPT"
            ],
            "summary":"Gpts Explore",
            "description":"Endpoint to explore all public GPTs available for installation.\n\nArgs:\n    tenant (Tenant): Tenant dependency injection for accessing database operations.\n\nReturns:\n    List[dict]: A list of GPT details.",
            "operationId":"gpts_explore",
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/gpt/create_all":{
         "post":{
            "tags":[
               "GPT"
            ],
            "summary":"Gpt Create All",
            "description":"Endpoint to create GPTs for all available APIs associated with the current tenant.\n\nArgs:\n\nReturns:\n    dict: A summary message indicating the number of successful and failed GPT creation attempts.",
            "operationId":"gpt_create_all",
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/gpt/create_from_api":{
         "post":{
            "tags":[
               "GPT"
            ],
            "summary":"Gpt Create From Api",
            "description":"Endpoint to create a GPT instance from a given API name.\nGenerates GPT metadata, description, and instructions based on the API's OpenAPI specification.\n\nArgs:\n    api_name (str): The unique name of the API from which to generate the GPT.\n\nReturns:\n    dict: The created GPT metadata.",
            "operationId":"gpt_create_from_api",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"api_name",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Api Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/gpt/create":{
         "post":{
            "tags":[
               "GPT"
            ],
            "summary":"Gpt Create",
            "description":"Endpoint to create a new GPT instance using a provided payload of GPT metadata and configuration.\n\nArgs:\n    payload (GPT): The GPT configuration payload including name, description, APIs, category, and more.\n\nReturns:\n    GPT: The newly created GPT instance.",
            "operationId":"gpt_create",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/GPT-Input"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/GPT-Output"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/gpt/{genai_app}/get":{
         "get":{
            "tags":[
               "GPT"
            ],
            "summary":"Retrieve Custom GPT Details",
            "description":"This endpoint retrieves the details of a specified custom GPT model based on the provided GPT name. It fetches the GPT's instructions, description, and accessible APIs.",
            "operationId":"gpt_get",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Genai App"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/GPT-Output"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/gpt/update":{
         "post":{
            "tags":[
               "GPT"
            ],
            "summary":"Gpt Update",
            "description":"Endpoint to update an existing GPT instance's description and associated APIs.\n\nArgs:\n    payload (GPT): The updated GPT configuration payload.\n\nReturns:\n    dict: A message indicating success, failure, or if no changes were detected.",
            "operationId":"gpt_update",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/GPT-Input"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/gpt/redirect/{token}":{
         "get":{
            "tags":[
               "GPT"
            ],
            "summary":"redirect the shorten url to full authorization url",
            "description":"Endpoint to redirect a shortened tokenized URL to its corresponding full authorization URL.\n\nArgs:\n    token (str): The shortened tokenized url.\n\nReturns:\n    RedirectResponse: A redirect to the original, full authorization URL.",
            "operationId":"gpt_redirect_to_authorization",
            "parameters":[
               {
                  "name":"token",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Token"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/gpt/{genai_app}/generate_token":{
         "post":{
            "tags":[
               "GPT"
            ],
            "summary":"Gpt Generate Token",
            "description":"Endpoint to generate a new access token for a specified GPT instance.\nAny previously generated token for the same GPT and organization will be deleted and replaced.\n\nArgs:\n    genai_app (str): The name of the GPT for which the token is to be generated.\n\nReturns:\n    dict: A dictionary containing the generated token, token ID, GPT name, and associated organization ID.",
            "operationId":"gpt_generate_token",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Genai App"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/gpt/{genai_app}/revoke_token":{
         "post":{
            "tags":[
               "GPT"
            ],
            "summary":"Gpt Revoke Token",
            "description":"Endpoint to revoke the access token associated with a given GPT instance.\n\nArgs:\n    genai_app (str): The name of the GPT whose token is to be revoked.\n\nReturns:\n    dict: A message indicating that the token has been successfully revoked.",
            "operationId":"gpt_revoke_token",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Genai App"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/gpt/{genai_app}/read_token":{
         "get":{
            "tags":[
               "GPT"
            ],
            "summary":"Gpt Read Token",
            "description":"Endpoint to reade the access token associated with a given GPT instance.\n\nArgs:\n    genai_app (str): The name of the GPT whose token is to be revoked.\n\nReturns:\n    dict: A dictionary containing the generated token, token ID, GPT name, and associated organization ID.",
            "operationId":"gpt_read_token_id",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Genai App"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/gpt/{genai_app}/install":{
         "post":{
            "tags":[
               "GPT"
            ],
            "summary":"Gpt Install",
            "description":"Endpoint to install a GPT instance and its associated API specifications for the current organization.\n\nArgs:\n    genai_app (str): The name of the GPT to install.\n\nReturns:\n    dict: A message indicating whether the installation was successful.",
            "operationId":"gpt_install",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Genai App"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/gpt/{genai_app}/uninstall":{
         "post":{
            "tags":[
               "GPT"
            ],
            "summary":"Gpt Uninstall",
            "description":"Endpoint to uninstall a GPT instance from the current organization.\n\nArgs:\n    genai_app (str): The name of the GPT to uninstall.\n\nReturns:\n    dict: A message confirming successful uninstallation.",
            "operationId":"gpt_uninstall",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Genai App"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/gpt_public/app_get_actions":{
         "get":{
            "tags":[
               "GPT Public"
            ],
            "summary":"App Get Actions",
            "description":"List the available actions for a given app.",
            "operationId":"app_get_actions",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"app_name",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "description":"The app to list actions for.",
                     "title":"App Name"
                  },
                  "description":"The app to list actions for."
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/gpt_public/apps_search_actions":{
         "get":{
            "tags":[
               "GPT Public"
            ],
            "summary":"Apps Search Actions",
            "description":"Search across all agentic metadata for the most relevant actions based on the query parameters.",
            "operationId":"apps_search_actions",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"query",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Search query.",
                     "title":"Query"
                  },
                  "description":"Search query."
               },
               {
                  "name":"action_type",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Type of action.",
                     "title":"Action Type"
                  },
                  "description":"Type of action."
               },
               {
                  "name":"resource",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Resource type.",
                     "title":"Resource"
                  },
                  "description":"Resource type."
               },
               {
                  "name":"min_rating",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"integer"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Minimum rating.",
                     "title":"Min Rating"
                  },
                  "description":"Minimum rating."
               },
               {
                  "name":"max_rating",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"integer"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Maximum rating.",
                     "title":"Max Rating"
                  },
                  "description":"Maximum rating."
               },
               {
                  "name":"required_input",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Required input.",
                     "title":"Required Input"
                  },
                  "description":"Required input."
               },
               {
                  "name":"max_results",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"integer"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Maximum results.",
                     "default":5,
                     "title":"Max Results"
                  },
                  "description":"Maximum results."
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/gpt_public/app_execute_action":{
         "post":{
            "tags":[
               "GPT Public"
            ],
            "summary":"App Execute Action",
            "description":"Triggers an interaction for a custom GPT model using the provided input and operation ID. Returns the GPT-generated response.",
            "operationId":"app_execute_action",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/GPTActionInput"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/GPTActionResponse"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/gpt_public/apps_list":{
         "get":{
            "tags":[
               "GPT Public"
            ],
            "summary":"Apps List",
            "description":"Returns Custom GPT's full instructions. GPT must call this at the start of each session, before any other action. Response JSON: {task, operations_list} where operations_list lists actions for app_execute_action.",
            "operationId":"apps_list",
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/openapi":{
         "get":{
            "tags":[
               "GPT Public"
            ],
            "summary":"Get Gpt Public Openapi",
            "description":"Returns a filtered OpenAPI specification that only includes endpoints with the specified operation IDs.\n\nParameters:\n    request (Request): The HTTP request object representing the incoming request.\n\nReturns:\n    dict: A dictionary representing the filtered OpenAPI specification.\n\nRaises:\n    HTTPException: If no paths are found with the specified operation IDs.",
            "operationId":"get_gpt_public_openapi",
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/integration/{gpt_name}/get":{
         "get":{
            "tags":[
               "Integration"
            ],
            "summary":"Integration Get",
            "description":"Endpoint to retrieve detailed information about a specific GPT integration.\nRestricted to root-level users.\n\nArgs:\n    gpt_name (str): The name of the GPT (and integration) whose details are being requested.\n\nReturns:\n    dict: A dictionary containing the integration's details including name, state, metadata, and website content.\n\nRaises:\n    HTTPException 404: If the integration with the specified name does not exist.\n    HTTPException 500: If any internal error occurs while retrieving the integration.",
            "operationId":"integration_get",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"gpt_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Gpt Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/integration/{gpt_name}/create":{
         "post":{
            "tags":[
               "Integration"
            ],
            "summary":"Integration Create",
            "description":"Endpoint to create a new integration for a GPT.\n\nArgs:\n    gpt_name (str): The name of the GPT model to integrate.\n\nReturns:\n    IntegrationModel: The created integration record, including website metadata.\n\nRaises:\n    HTTPException 400:\n        - If an integration with the given name already exists.\n        - If the GPT has no description available (required for the integration overview).\n    HTTPException 404: If no GPT is found with the provided name.\n    HTTPException 500: If any unexpected error occurs during creation.",
            "operationId":"integration_create",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"gpt_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Gpt Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/IntegrationModel"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/integrations/list":{
         "get":{
            "tags":[
               "Integration"
            ],
            "summary":"Integrations List",
            "description":"Endpoint to retrieve a list of GPT integrations.\nRestricted to root-level users. Supports optional filtering by integration state.\n\nArgs:\n    state (Optional[State]): Optional query parameter to filter integrations by state\n                             (e.g., `DRAFT`, `PUBLISHED`, etc.).\n\nReturns:\n    List[dict]: A list of integration records matching the query.\n\nRaises:\n    HTTPException 500: If an error occurs during retrieval.",
            "operationId":"integrations_list",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"state",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "$ref":"#/components/schemas/State"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "title":"State"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/integrations/published":{
         "get":{
            "tags":[
               "Integration"
            ],
            "summary":"Integrations Published",
            "description":"Endpoint to retrieve all published integrations, enriched with GPT metadata.\n\nReturns a list of published integrations with additional fields such as categories, icons, and summaries\npulled from the GPTs collection for display or marketplace listing purposes.\n\nArgs:\n\nReturns:\n    List[dict]: A list of published integrations with enriched metadata.\n\nRaises:\n    HTTPException 500: If any error occurs during integration or GPT metadata retrieval.",
            "operationId":"integrations_published",
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/integration/{gpt_name}/change_state":{
         "patch":{
            "tags":[
               "Integration"
            ],
            "summary":"Integration Change State",
            "description":"Endpoint to change the state of a specific GPT integration.\nAllows admin users to transition an integration to a new lifecycle state (e.g., DRAFT, PUBLISHED).\n\nArgs:\n    gpt_name (str): The name of the integration (typically aligned with a GPT name).\n    new_state (States): The new target state to apply to the integration (default is `DRAFT`).\n\nReturns:\n    dict: A success message confirming the state change.\n\nRaises:\n    HTTPException 404: If the integration with the specified name does not exist.\n    HTTPException 500: If any error occurs during the update process.",
            "operationId":"integration_change_state",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"gpt_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Gpt Name"
                  }
               },
               {
                  "name":"new_state",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "description":"Integration state.",
                     "default":"draft",
                     "title":"New State"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/integration/{gpt_name}/delete":{
         "delete":{
            "tags":[
               "Integration"
            ],
            "summary":"Integration Delete",
            "description":"Endpoint to delete a specific GPT integration.\nOnly unpublished integrations can be deleted.\nRestricted to root-level users.\n\nArgs:\n    gpt_name (str): The name of the integration (typically a GPT name).\n\nReturns:\n    dict: A message indicating successful deletion of the integration.\n\nRaises:\n    HTTPException 404: If the integration with the specified name does not exist.\n    HTTPException 400: If the integration is in a `PUBLISHED` state and cannot be deleted.\n    HTTPException 500: If an error occurs during the deletion process.",
            "operationId":"integration_delete",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"gpt_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Gpt Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/integration/{gpt_name}/generate_details":{
         "post":{
            "tags":[
               "Integration"
            ],
            "summary":"Integration Generate Details",
            "description":"Endpoint to generate integration website content for a specific GPT.\nUses GPT metadata (summary and description) and a GenAI model to create marketing or documentation content.\n\nArgs:\n    gpt_name (str): The name of the GPT for which integration content should be generated.\n\nReturns:\n    dict: A dictionary of generated integration information, such as headline, pitch, and features.\n\nRaises:\n    HTTPException 404: If the specified GPT does not exist in the tenant.\n    HTTPException 500: If content generation fails due to a runtime error.",
            "operationId":"generate_integration_info",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"gpt_name",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Gpt Name"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/integration/create_all":{
         "post":{
            "tags":[
               "System"
            ],
            "summary":"Integration Create All",
            "description":"Endpoint to create integrations for all available GPTs in the system.\n\nArgs:\n\nReturns:\n    dict: A summary message with the count of successful and failed integration creations.\n\nRaises:\n    HTTPException 404: If no GPTs are found to create integrations for.\n    HTTPException 500: If an unexpected error occurs during the creation process.",
            "operationId":"integration_create_all",
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/integration/change_state_all":{
         "post":{
            "tags":[
               "System"
            ],
            "summary":"Integration Change State All",
            "description":"Endpoint to bulk update the state of all GPT integrations in the system.\n\nArgs:\n    new_state (States): The target state to which all integrations should be transitioned (default: `DRAFT`).\n\nReturns:\n    dict: A message summarizing the number of successful and failed integration state changes.\n\nRaises:\n    HTTPException 404: If no integrations are found in the global database.\n    HTTPException 500: If an error occurs during the operation.",
            "operationId":"integration_change_state_all",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"new_state",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "description":"Integration state.",
                     "default":"draft",
                     "title":"New State"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/context":{
         "get":{
            "tags":[
               "Context"
            ],
            "summary":"Context List",
            "description":"Endpoint to list all contexts associated with the current tenant.\n\nArgs:\n\nReturns:\n    List[Context]: A list of all `Context` model instances stored under the tenant.\n\nRaises:\n    HTTPException 500: If an error occurs while retrieving contexts from the database.",
            "operationId":"context_list",
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "items":{
                              "$ref":"#/components/schemas/Context"
                           },
                           "type":"array",
                           "title":"Response Context List"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         },
         "post":{
            "tags":[
               "Context"
            ],
            "summary":"Context Create",
            "description":"Endpoint to create a new context associated with the authenticated tenant.\n\nArgs:\n    context (ContextCreate): The request body containing the context definition.\n\nReturns:\n    Context: The created context object.\n\nRaises:\n    HTTPException 409: If the context creation fails due to a runtime error.",
            "operationId":"context_create",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/ContextCreate"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/Context"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/context/{context_id}":{
         "get":{
            "tags":[
               "Context"
            ],
            "summary":"Context Get",
            "description":"Endpoint to retrieve a context by its unique ID.\n\nArgs:\n    context_id (str): The ID of the context to retrieve.\n\nReturns:\n    Context: A `Context` model instance representing the requested context.\n\nRaises:\n    HTTPException 404: If the context with the specified ID does not exist.",
            "operationId":"context_get",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"context_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Context Id"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/Context"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         },
         "put":{
            "tags":[
               "Context"
            ],
            "summary":"Context Update",
            "description":"Endpoint to update an existing context by its ID.\n\nArgs:\n    context_id (str): The unique identifier of the context to update.\n    context_update (ContextCreate): The updated context data.\n\nReturns:\n    dict: A confirmation message indicating the update was successful.\n\nRaises:\n    HTTPException 404: If the context with the given ID does not exist.\n    HTTPException 500: If a runtime error occurs during the update process.",
            "operationId":"context_update",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"context_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Context Id"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/ContextCreate"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         },
         "delete":{
            "tags":[
               "Context"
            ],
            "summary":"Context Delete",
            "description":"Endpoint to delete a context by its ID.\n\nArgs:\n    context_id (str): The unique identifier of the context to delete.\n\nReturns:\n    dict: A confirmation message indicating the context was deleted.\n\nRaises:\n    HTTPException 404:\n        - If the context with the given ID is not found.\n    HTTPException 500:\n        - If a runtime error occurs during deletion.",
            "operationId":"context_delete",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"context_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Context Id"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/task":{
         "get":{
            "tags":[
               "Task"
            ],
            "summary":"Task List",
            "description":"Endpoint to list all tasks accessible to the current user.\nFilters tasks based on state and visibility:\n- Only includes tasks that are `enabled`.\n- Includes tasks that are either `public` or created by the current user.\n\nArgs:\n\nReturns:\n    List[Task]: A list of `Task` objects visible to the current user.\n\nRaises:\n    HTTPException 500: If a runtime error occurs during task retrieval.",
            "operationId":"task_list",
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "items":{
                              "$ref":"#/components/schemas/Task"
                           },
                           "type":"array",
                           "title":"Response Task List"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         },
         "post":{
            "tags":[
               "Task"
            ],
            "summary":"Task Create",
            "description":"Endpoint to create a new task associated with the current organization and user.\n\nArgs:\n    task (TaskCreate): The request body containing task details including name, schedule, and execution parameters.\n\nReturns:\n    Task: The newly created task object.\n\nRaises:\n    HTTPException 409: If task creation fails due to a runtime error.",
            "operationId":"task_create",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/TaskCreate-Input"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/Task"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/task/{task_id}":{
         "get":{
            "tags":[
               "Task"
            ],
            "summary":"Task Get",
            "description":"Endpoint to retrieve a specific task by its unique ID.\n\nArgs:\n    task_id (str): The unique identifier of the task to retrieve.\n\nReturns:\n    Task: A `Task` object matching the provided ID.\n\nRaises:\n    HTTPException 404: If no task is found with the specified ID.",
            "operationId":"task_get",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"task_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Task Id"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/Task"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         },
         "put":{
            "tags":[
               "Task"
            ],
            "summary":"Task Update",
            "description":"Endpoint to update an existing task by its ID.\nOnly the original creator of the task is authorized to perform the update.\n\nArgs:\n    task_id (str): The unique identifier of the task to update.\n    task_update (TaskCreate): The updated task data submitted by the user.\n\nReturns:\n    dict: A success message indicating the task was updated.\n\nRaises:\n    HTTPException 403: If the current user is not the task creator.\n    HTTPException 404: If the task is not found.\n    HTTPException 500: If an internal error occurs during update.",
            "operationId":"task_update",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"task_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Task Id"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/TaskCreate-Input"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         },
         "delete":{
            "tags":[
               "Task"
            ],
            "summary":"Task Delete",
            "description":"Endpoint to delete an existing task by its ID.\nOnly the original creator of the task is authorized to delete the task.\n\nArgs:\n    task_id (str): The unique identifier of the task to be deleted.\n\nReturns:\n    dict: A confirmation message on successful deletion.\n\nRaises:\n    HTTPException 403: If the current user is not authorized to delete the task.\n    HTTPException 404: If the task is not found.\n    HTTPException 500: If a runtime error occurs during deletion.",
            "operationId":"task_delete",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"task_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Task Id"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/task/generate":{
         "post":{
            "tags":[
               "Task"
            ],
            "summary":"Task Generate",
            "description":"Endpoint to generate a task from a natural language instruction and a list of API specifications.\n\nArgs:\n    payload (TaskGenerate): The input containing:\n        - `instruction` (str): Natural language prompt describing the intended task.\n        - `specs` (List[str]): API spec names to consider when generating the task.\n\nReturns:\n    TaskCreate: A structured task object (not persisted), including task name, actions, and metadata.\n\nRaises:\n    HTTPException 500: If an error occurs during the generation process.",
            "operationId":"task_generate",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/TaskGenerate"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/TaskCreate-Output"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/task/{task_id}/scheduled_runs_results":{
         "get":{
            "tags":[
               "Task"
            ],
            "summary":"Task Get Scheduled Runs Results",
            "description":"Endpoint to retrieve the execution results of scheduled task runs.\n\nArgs:\n    task_id (str): The unique identifier of the task whose scheduled run results are being fetched.\n    page (int, optional): Pagination index for results. Defaults to 1.\n    limit (int, optional): Number of results per page. Defaults to 50.\n\nReturns:\n    List[TaskOutcome]: A paginated list of `TaskOutcome` entries for the specified task.\n\nRaises:\n    HTTPException 400: If the task has a manual schedule (i.e., not auto-run).\n    HTTPException 403: If the task is private and the current user is not the creator.\n    HTTPException 404: If the task or its scheduled runs are not found.\n    HTTPException 500: If a runtime error occurs during retrieval.",
            "operationId":"task_get_scheduled_runs_results",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"task_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Task Id"
                  }
               },
               {
                  "name":"page",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"integer",
                     "default":1,
                     "title":"Page"
                  }
               },
               {
                  "name":"limit",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"integer",
                     "default":50,
                     "title":"Limit"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "type":"array",
                           "items":{
                              "$ref":"#/components/schemas/TaskOutcome"
                           },
                           "title":"Response Task Get Scheduled Runs Results"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/task/{task_id}/background_run":{
         "post":{
            "tags":[
               "Task"
            ],
            "summary":"Task Background Run",
            "description":"Endpoint to execute a task asynchronously in the background.\n\nArgs:\n    task_id (str): The unique identifier of the task to execute.\n\nReturns:\n    TaskOutcome: The result of the task execution, including metadata like status, output, timestamps, etc.\n\nRaises:\n    HTTPException 403: If the task is private and the current user is not its creator.\n    HTTPException 404: If the task is not found.\n    HTTPException 500: If an error occurs during execution.",
            "operationId":"task_background_run",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"task_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Task Id"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/TaskOutcome"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/tenant/setup":{
         "post":{
            "tags":[
               "Tenant"
            ],
            "summary":"Tenant Setup",
            "description":"Public endpoint to provision a single-tenant environment using a license.\nIt validates the license, creates tenant DB, registers the first admin, and returns an org token.",
            "operationId":"tenant_setup",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/TenantSetupRequest"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/TenantSetupResponse"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/tenant/info":{
         "get":{
            "tags":[
               "Tenant"
            ],
            "summary":"Get Tenant Info",
            "description":"Returns metadata about the tenant including tier and members, using the license_token for lookup.",
            "operationId":"tenant_info",
            "parameters":[
               {
                  "name":"license_token",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"License Token"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/tenant/update_license":{
         "post":{
            "tags":[
               "Tenant"
            ],
            "summary":"Update Tenant License",
            "description":"Updates the tenant's license and tier using a new license_token.",
            "operationId":"tenant_update_license",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/LicenseUpdateRequest"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/tenant/create_license":{
         "post":{
            "tags":[
               "Tenant"
            ],
            "summary":"Create License Op",
            "description":"Create a signed license token for a tenant. Only available in non-SaaS deployments.",
            "operationId":"tenant_create_license",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/CreateLicenseRequest"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "201":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/CreateLicenseResponse"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/tenant/decode_license":{
         "post":{
            "tags":[
               "Tenant"
            ],
            "summary":"Decode License Op",
            "description":"Decode a license token and return its claims. Only available in non-SaaS deployments.",
            "operationId":"tenant_decode_license",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/DecodeLicenseRequest"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/DecodeLicenseResponse"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/tenant/add_account":{
         "post":{
            "tags":[
               "Tenant"
            ],
            "summary":"Add Account",
            "description":"Add a new account (org) to an existing tenant. Requires a valid tenant_org_token as a Bearer token in the Authorization header.",
            "operationId":"tenant_add_account",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/AddAccountRequest"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/AddAccountResponse"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/mcp/app_get_actions":{
         "get":{
            "tags":[
               "MCP"
            ],
            "summary":"App Get Actions",
            "description":"List the available actions for a given app.",
            "operationId":"mcp_app_get_actions",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "description":"The name of the GenAI app.",
                     "title":"Genai App"
                  },
                  "description":"The name of the GenAI app."
               },
               {
                  "name":"app_name",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "description":"The app to list actions for.",
                     "title":"App Name"
                  },
                  "description":"The app to list actions for."
               },
               {
                  "name":"app_type",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "description":"The type of the app ('mcp' or 'agent').",
                     "default":"mcp",
                     "title":"App Type"
                  },
                  "description":"The type of the app ('mcp' or 'agent')."
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/mcp/apps_search_actions":{
         "get":{
            "tags":[
               "MCP"
            ],
            "summary":"Apps Search Actions",
            "description":"Search across all agentic metadata for the most relevant actions based on the query parameters.",
            "operationId":"mcp_apps_search_actions",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "description":"The name of the GenAI app.",
                     "title":"Genai App"
                  },
                  "description":"The name of the GenAI app."
               },
               {
                  "name":"query",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Search query.",
                     "title":"Query"
                  },
                  "description":"Search query."
               },
               {
                  "name":"action_type",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Type of action.",
                     "title":"Action Type"
                  },
                  "description":"Type of action."
               },
               {
                  "name":"resource",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Resource type.",
                     "title":"Resource"
                  },
                  "description":"Resource type."
               },
               {
                  "name":"min_rating",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"integer"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Minimum rating.",
                     "title":"Min Rating"
                  },
                  "description":"Minimum rating."
               },
               {
                  "name":"max_rating",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"integer"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Maximum rating.",
                     "title":"Max Rating"
                  },
                  "description":"Maximum rating."
               },
               {
                  "name":"required_input",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Required input.",
                     "title":"Required Input"
                  },
                  "description":"Required input."
               },
               {
                  "name":"max_results",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"integer"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Maximum results.",
                     "default":5,
                     "title":"Max Results"
                  },
                  "description":"Maximum results."
               },
               {
                  "name":"app_type",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "description":"The type of the app ('mcp' or 'agent').",
                     "default":"mcp",
                     "title":"App Type"
                  },
                  "description":"The type of the app ('mcp' or 'agent')."
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/mcp/app_execute_action":{
         "post":{
            "tags":[
               "MCP"
            ],
            "summary":"App Execute Action",
            "description":"Triggers an interaction for a custom MCP model using the provided input and operation ID. Returns the MCP-generated response.",
            "operationId":"mcp_app_execute_action",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "description":"The name of the GenAI app.",
                     "title":"Genai App"
                  },
                  "description":"The name of the GenAI app."
               },
               {
                  "name":"app_type",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "description":"The type of the app ('mcp' or 'agent').",
                     "default":"mcp",
                     "title":"App Type"
                  },
                  "description":"The type of the app ('mcp' or 'agent')."
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/MCPActionInput"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/MCPActionResponse"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/mcp/get_instructions":{
         "get":{
            "tags":[
               "MCP"
            ],
            "summary":"Get Instructions",
            "description":"Returns the formatted agent instructions for the specified GenAI app.\nThis includes the app description, internal guidelines, and list of available apps with their capabilities.",
            "operationId":"mcp_get_instructions",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "description":"The name of the GenAI app.",
                     "title":"Genai App"
                  },
                  "description":"The name of the GenAI app."
               },
               {
                  "name":"app_type",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "description":"The type of the app ('mcp' or 'agent').",
                     "default":"mcp",
                     "title":"App Type"
                  },
                  "description":"The type of the app ('mcp' or 'agent')."
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/MCPInstructionsResponse"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/mcp/apps_list":{
         "get":{
            "tags":[
               "MCP"
            ],
            "summary":"Apps List",
            "description":"Returns Custom GPT's full instructions. GPT must call this at the start of each session, before any other action. Response JSON: {task, operations_list} where operations_list lists actions for app_execute_action.",
            "operationId":"mcp_apps_list",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "description":"The name of the GenAI app.",
                     "title":"Genai App"
                  },
                  "description":"The name of the GenAI app."
               },
               {
                  "name":"app_type",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "description":"The type of the app ('mcp' or 'agent').",
                     "default":"mcp",
                     "title":"App Type"
                  },
                  "description":"The type of the app ('mcp' or 'agent')."
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/mcp/list_contexts":{
         "get":{
            "tags":[
               "MCP"
            ],
            "summary":"List Contexts",
            "description":"List all context names available for the specified agent.\nReturns a list of context names that the agent has access to.",
            "operationId":"list_contexts",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "description":"The name of the GenAI app.",
                     "title":"Genai App"
                  },
                  "description":"The name of the GenAI app."
               },
               {
                  "name":"app_type",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "description":"The type of the app ('mcp' or 'agent').",
                     "default":"agent",
                     "title":"App Type"
                  },
                  "description":"The type of the app ('mcp' or 'agent')."
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/MCPContextNamesResponse"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/mcp/get_context":{
         "get":{
            "tags":[
               "MCP"
            ],
            "summary":"Get Context",
            "description":"Get a specific context by its name for the specified agent.\nReturns the full context data for the specified context name if the agent has access to it.",
            "operationId":"get_context",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"genai_app",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "description":"The name of the GenAI app.",
                     "title":"Genai App"
                  },
                  "description":"The name of the GenAI app."
               },
               {
                  "name":"app_type",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"string",
                     "description":"The type of the app ('mcp' or 'agent').",
                     "default":"agent",
                     "title":"App Type"
                  },
                  "description":"The type of the app ('mcp' or 'agent')."
               },
               {
                  "name":"context_name",
                  "in":"query",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "description":"The name of the context to retrieve.",
                     "title":"Context Name"
                  },
                  "description":"The name of the context to retrieve."
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/MCPContextResponse"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/mcp-server/create":{
         "post":{
            "tags":[
               "MCP Server"
            ],
            "summary":"Mcp Server Create",
            "description":"Create a new MCP server.\n\nArgs:\n    mcp_server_data: The MCP server data to create\n    current_user: The current authenticated user\n    tenant: The tenant database\n\nReturns:\n    MCPServer: The created MCP server\n\nRaises:\n    HTTPException(400): If input validation fails\n    HTTPException(403): If trying to create public server without APIGENE tier\n    HTTPException(409): If MCP server with same name already exists\n    HTTPException(500): If database operation fails or other error occurs",
            "operationId":"mcp_server_create",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/MCPServerCreate"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/MCPServer"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/mcp-server/list":{
         "get":{
            "tags":[
               "MCP Server"
            ],
            "summary":"Mcp Servers List",
            "description":"List all MCP servers for the current tenant.\n\nArgs:\n    current_user: The current authenticated user\n    tenant: The tenant database\n    server_type: Optional filter by server type\n    enabled_only: Only return enabled servers\n\nReturns:\n    List[MCPServer]: List of MCP servers\n\nRaises:\n    HTTPException(400): If input validation fails\n    HTTPException(500): If database operation fails or other error occurs",
            "operationId":"mcp_servers_list",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"server_type",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "$ref":"#/components/schemas/MCPServerType"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Filter by server type",
                     "title":"Server Type"
                  },
                  "description":"Filter by server type"
               },
               {
                  "name":"enabled_only",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"boolean",
                     "description":"Only return enabled servers",
                     "default":false,
                     "title":"Enabled Only"
                  },
                  "description":"Only return enabled servers"
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "type":"array",
                           "items":{
                              "$ref":"#/components/schemas/MCPServer"
                           },
                           "title":"Response Mcp Servers List"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/mcp-server/get/{server_id}":{
         "get":{
            "tags":[
               "MCP Server"
            ],
            "summary":"Mcp Server Get",
            "description":"Get a specific MCP server by ID.\n\nArgs:\n    server_id: The ID of the MCP server to retrieve\n    current_user: The current authenticated user\n    tenant: The tenant database\n\nReturns:\n    MCPServer: The MCP server details\n\nRaises:\n    HTTPException(400): If input validation fails\n    HTTPException(404): If MCP server not found\n    HTTPException(500): If database operation fails or other error occurs",
            "operationId":"mcp_server_get",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"server_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Server Id"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/MCPServer"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/mcp-server/update/{server_id}":{
         "put":{
            "tags":[
               "MCP Server"
            ],
            "summary":"Mcp Server Update",
            "description":"Update an existing MCP server.\n\nArgs:\n    server_id: The ID of the MCP server to update\n    mcp_server_data: The updated MCP server data\n    current_user: The current authenticated user\n    tenant: The tenant database\n\nReturns:\n    MCPServer: The updated MCP server\n\nRaises:\n    HTTPException(400): If input validation fails\n    HTTPException(404): If MCP server not found\n    HTTPException(403): If trying to change to public server without APIGENE tier\n    HTTPException(409): If new name conflicts with existing server\n    HTTPException(500): If database operation fails or other error occurs",
            "operationId":"mcp_server_update",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"server_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Server Id"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/MCPServerUpdate"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/MCPServer"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/mcp-server/delete/{server_id}":{
         "delete":{
            "tags":[
               "MCP Server"
            ],
            "summary":"Mcp Server Delete",
            "description":"Delete an MCP server.\n\nArgs:\n    server_id: The ID of the MCP server to delete\n    current_user: The current authenticated user\n    tenant: The tenant database\n\nReturns:\n    dict: Confirmation message\n\nRaises:\n    HTTPException(400): If input validation fails\n    HTTPException(404): If MCP server not found\n    HTTPException(500): If database operation fails or other error occurs",
            "operationId":"mcp_server_delete",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"server_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Server Id"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/mcp-server/create_from_api":{
         "post":{
            "tags":[
               "MCP Server",
               "MCP Server"
            ],
            "summary":"Mcp Create From Api",
            "description":"Create a new MCP server from an existing API specification.\n\nThis endpoint locates the API by name, fetches its details, and creates a valid\nMCP server of APIGENE type with the API's information. The MCP server name is\nautomatically set to the API title, enabled is set to true, and global_spec\nis derived from the API data.\n\nArgs:\n    request: The request containing only the API name\n    current_user: The current authenticated user\n    tenant: The tenant database\n\nReturns:\n    dict: The created MCP server information\n\nRaises:\n    HTTPException(404): If the API specification is not found\n    HTTPException(409): If an MCP server with the same name already exists\n    HTTPException(500): If an error occurs during creation",
            "operationId":"mcp_create_from_api",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/MCPCreateFromApiRequest"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/agent/create":{
         "post":{
            "tags":[
               "Agent"
            ],
            "summary":"Agent Create",
            "description":"Create a new agent.\n\nArgs:\n    agent_data: The agent data to create\n    current_user: The current authenticated user\n    tenant: The tenant database\n\nReturns:\n    Agent: The created agent\n\nRaises:\n    HTTPException(400): If input validation fails\n    HTTPException(403): If trying to create public agent without APIGENE tier\n    HTTPException(409): If agent with same name already exists\n    HTTPException(500): If database operation fails or other error occurs",
            "operationId":"agent_create",
            "requestBody":{
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/AgentCreate"
                     }
                  }
               },
               "required":true
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/Agent"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            },
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ]
         }
      },
      "/api/agent/list":{
         "get":{
            "tags":[
               "Agent"
            ],
            "summary":"Agents List",
            "description":"List all agents for the current tenant.\n\nArgs:\n    current_user: The current authenticated user\n    tenant: The tenant database\n    agent_type: Optional filter by agent type\n\nReturns:\n    List[Agent]: List of agents\n\nRaises:\n    HTTPException(400): If input validation fails\n    HTTPException(500): If database operation fails or other error occurs",
            "operationId":"agents_list",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"agent_type",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "$ref":"#/components/schemas/AgentType"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Filter by agent type",
                     "title":"Agent Type"
                  },
                  "description":"Filter by agent type"
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "type":"array",
                           "items":{
                              "$ref":"#/components/schemas/Agent"
                           },
                           "title":"Response Agents List"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/agent/get/{agent_id}":{
         "get":{
            "tags":[
               "Agent"
            ],
            "summary":"Agent Get",
            "description":"Get a specific agent by ID.\n\nArgs:\n    agent_id: The ID of the agent to retrieve\n    current_user: The current authenticated user\n    tenant: The tenant database\n\nReturns:\n    Agent: The agent details\n\nRaises:\n    HTTPException(400): If input validation fails\n    HTTPException(404): If agent not found\n    HTTPException(500): If database operation fails or other error occurs",
            "operationId":"agent_get",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"agent_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Agent Id"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/Agent"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/agent/update/{agent_id}":{
         "put":{
            "tags":[
               "Agent"
            ],
            "summary":"Agent Update",
            "description":"Update an existing agent.\n\nArgs:\n    agent_id: The ID of the agent to update\n    agent_data: The updated agent data\n    current_user: The current authenticated user\n    tenant: The tenant database\n\nReturns:\n    Agent: The updated agent\n\nRaises:\n    HTTPException(400): If input validation fails\n    HTTPException(404): If agent not found\n    HTTPException(403): If trying to change to public agent without APIGENE tier\n    HTTPException(409): If new name conflicts with existing agent\n    HTTPException(500): If database operation fails or other error occurs",
            "operationId":"agent_update",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"agent_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Agent Id"
                  }
               }
            ],
            "requestBody":{
               "required":true,
               "content":{
                  "application/json":{
                     "schema":{
                        "$ref":"#/components/schemas/AgentUpdate"
                     }
                  }
               }
            },
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/Agent"
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/agent/delete/{agent_id}":{
         "delete":{
            "tags":[
               "Agent"
            ],
            "summary":"Agent Delete",
            "description":"Delete an agent.\n\nArgs:\n    agent_id: The ID of the agent to delete\n    current_user: The current authenticated user\n    tenant: The tenant database\n\nReturns:\n    dict: Confirmation message\n\nRaises:\n    HTTPException(400): If input validation fails\n    HTTPException(404): If agent not found\n    HTTPException(500): If database operation fails or other error occurs",
            "operationId":"agent_delete",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"agent_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Agent Id"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/audit/audit-logs":{
         "get":{
            "summary":"Get Audit Logs",
            "description":"Get audit logs for the tenant with optional filtering\n\nReturns:\n    List of audit log entries with metadata",
            "operationId":"get_audit_logs_api_audit_audit_logs_get",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"resource_type",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Filter by resource type (application, agent, mcp_server, context)",
                     "title":"Resource Type"
                  },
                  "description":"Filter by resource type (application, agent, mcp_server, context)"
               },
               {
                  "name":"resource_id",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Filter by specific resource ID",
                     "title":"Resource Id"
                  },
                  "description":"Filter by specific resource ID"
               },
               {
                  "name":"action",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Filter by action (create, update, delete)",
                     "title":"Action"
                  },
                  "description":"Filter by action (create, update, delete)"
               },
               {
                  "name":"user_id",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Filter by user ID",
                     "title":"User Id"
                  },
                  "description":"Filter by user ID"
               },
               {
                  "name":"start_date",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string",
                           "format":"date-time"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Filter by start date (ISO format)",
                     "title":"Start Date"
                  },
                  "description":"Filter by start date (ISO format)"
               },
               {
                  "name":"end_date",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "anyOf":[
                        {
                           "type":"string",
                           "format":"date-time"
                        },
                        {
                           "type":"null"
                        }
                     ],
                     "description":"Filter by end date (ISO format)",
                     "title":"End Date"
                  },
                  "description":"Filter by end date (ISO format)"
               },
               {
                  "name":"skip",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"integer",
                     "minimum":0,
                     "description":"Number of records to skip",
                     "default":0,
                     "title":"Skip"
                  },
                  "description":"Number of records to skip"
               },
               {
                  "name":"limit",
                  "in":"query",
                  "required":false,
                  "schema":{
                     "type":"integer",
                     "maximum":1000,
                     "minimum":1,
                     "description":"Maximum number of records to return",
                     "default":100,
                     "title":"Limit"
                  },
                  "description":"Maximum number of records to return"
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      },
      "/api/audit/audit-logs/resource/{resource_type}/{resource_id}":{
         "get":{
            "summary":"Get Resource Audit History",
            "description":"Get complete audit history for a specific resource\n\nArgs:\n    resource_type: Type of resource (application, agent, mcp_server, context)\n    resource_id: ID of the resource\n\nReturns:\n    Complete audit history for the resource",
            "operationId":"get_resource_audit_history_api_audit_audit_logs_resource__resource_type___resource_id__get",
            "security":[
               {
                  "BearerAuth":[
                     
                  ]
               }
            ],
            "parameters":[
               {
                  "name":"resource_type",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Resource Type"
                  }
               },
               {
                  "name":"resource_id",
                  "in":"path",
                  "required":true,
                  "schema":{
                     "type":"string",
                     "title":"Resource Id"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successful Response",
                  "content":{
                     "application/json":{
                        "schema":{
                           
                        }
                     }
                  }
               },
               "422":{
                  "description":"Validation Error",
                  "content":{
                     "application/json":{
                        "schema":{
                           "$ref":"#/components/schemas/HTTPValidationError"
                        }
                     }
                  }
               }
            }
         }
      }
   },
   "components":{
      "schemas":{
         "APIInstructions":{
            "properties":{
               "api":{
                  "type":"string",
                  "title":"Api",
                  "description":"Name of the api"
               },
               "url":{
                  "type":"string",
                  "title":"Url",
                  "description":"URL for API authentication instructions."
               }
            },
            "type":"object",
            "required":[
               "api",
               "url"
            ],
            "title":"APIInstructions"
         },
         "ActionResult":{
            "properties":{
               "action_name":{
                  "type":"string",
                  "title":"Action Name",
                  "description":"Name of the action.",
                  "default":"N/A"
               },
               "status_code":{
                  "type":"integer",
                  "title":"Status Code",
                  "description":"The status code of the response.",
                  "default":555
               },
               "raw_data":{
                  "anyOf":[
                     {
                        
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Raw Data",
                  "description":"Content of the request to relevant service."
               },
               "response_content":{
                  "anyOf":[
                     {
                        
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Response Content",
                  "description":"Content of the response."
               },
               "context":{
                  "anyOf":[
                     {
                        
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Context",
                  "description":"Addtional context information that is passed to the action"
               }
            },
            "type":"object",
            "title":"ActionResult"
         },
         "AddAccountRequest":{
            "properties":{
               "account_id":{
                  "type":"string",
                  "title":"Account Id"
               },
               "admin_email":{
                  "type":"string",
                  "format":"email",
                  "title":"Admin Email"
               },
               "admin_name":{
                  "type":"string",
                  "title":"Admin Name"
               },
               "admin_password":{
                  "type":"string",
                  "title":"Admin Password"
               }
            },
            "type":"object",
            "required":[
               "account_id",
               "admin_email",
               "admin_name",
               "admin_password"
            ],
            "title":"AddAccountRequest"
         },
         "AddAccountResponse":{
            "properties":{
               "message":{
                  "type":"string",
                  "title":"Message"
               },
               "account_org_token":{
                  "type":"string",
                  "title":"Account Org Token"
               }
            },
            "type":"object",
            "required":[
               "message",
               "account_org_token"
            ],
            "title":"AddAccountResponse"
         },
         "Agent":{
            "properties":{
               "id":{
                  "type":"string",
                  "title":"Id",
                  "description":"Unique identifier for the agent"
               },
               "name":{
                  "type":"string",
                  "title":"Name",
                  "description":"Name of the agent"
               },
               "description":{
                  "type":"string",
                  "title":"Description",
                  "description":"Brief description of what the agent does"
               },
               "instructions":{
                  "type":"string",
                  "title":"Instructions",
                  "description":"Long string with the agent instructions"
               },
               "apis":{
                  "items":{
                     "type":"string"
                  },
                  "type":"array",
                  "title":"Apis",
                  "description":"List of API names that the agent contains"
               },
               "mcps":{
                  "items":{
                     "type":"string"
                  },
                  "type":"array",
                  "title":"Mcps",
                  "description":"List of MCP server names that the agent contains"
               },
               "context":{
                  "items":{
                     "type":"string"
                  },
                  "type":"array",
                  "title":"Context",
                  "description":"List of context IDs that the agent contains"
               },
               "icon":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Icon",
                  "description":"Either a URL or base64 string for the agent icon"
               },
               "agent_type":{
                  "type":"string",
                  "title":"Agent Type",
                  "description":"Type of agent (private/public)"
               },
               "created_at":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Created At",
                  "description":"When the agent was created"
               },
               "updated_at":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Updated At",
                  "description":"When the agent was last updated"
               },
               "created_by":{
                  "type":"string",
                  "title":"Created By",
                  "description":"Email of the user who created the agent"
               }
            },
            "type":"object",
            "required":[
               "id",
               "name",
               "description",
               "instructions",
               "agent_type",
               "created_at",
               "updated_at",
               "created_by"
            ],
            "title":"Agent",
            "description":"Response model for agent"
         },
         "AgentCreate":{
            "properties":{
               "name":{
                  "type":"string",
                  "title":"Name",
                  "description":"Name of the agent"
               },
               "description":{
                  "type":"string",
                  "title":"Description",
                  "description":"Brief description of what the agent does"
               },
               "instructions":{
                  "title":"Instructions",
                  "description":"Long string with the agent instructions (can be string or dict)"
               },
               "apis":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Apis",
                  "description":"List of API names that the agent contains"
               },
               "mcps":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Mcps",
                  "description":"List of MCP server names that the agent contains"
               },
               "context":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Context",
                  "description":"List of context IDs that the agent contains"
               },
               "icon":{
                  "anyOf":[
                     {
                        
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Icon",
                  "description":"Either a URL, base64 string, or dict for the agent icon"
               },
               "agent_type":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/AgentType"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "description":"Type of agent (private/public)",
                  "default":"private"
               }
            },
            "type":"object",
            "required":[
               "name",
               "description",
               "instructions"
            ],
            "title":"AgentCreate",
            "description":"Request model for creating an agent"
         },
         "AgentType":{
            "type":"string",
            "enum":[
               "private",
               "public"
            ],
            "title":"AgentType",
            "description":"Agent visibility types"
         },
         "AgentUpdate":{
            "properties":{
               "name":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Name",
                  "description":"Name of the agent"
               },
               "description":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Description",
                  "description":"Brief description of what the agent does"
               },
               "instructions":{
                  "anyOf":[
                     {
                        
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Instructions",
                  "description":"Long string with the agent instructions (can be string or dict)"
               },
               "apis":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Apis",
                  "description":"List of API names that the agent contains"
               },
               "mcps":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Mcps",
                  "description":"List of MCP server names that the agent contains"
               },
               "context":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Context",
                  "description":"List of context IDs that the agent contains"
               },
               "icon":{
                  "anyOf":[
                     {
                        
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Icon",
                  "description":"Either a URL, base64 string, or dict for the agent icon"
               },
               "agent_type":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/AgentType"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "description":"Type of agent (private/public)"
               }
            },
            "type":"object",
            "title":"AgentUpdate",
            "description":"Request model for updating an agent"
         },
         "Body_spec_create_from_file":{
            "properties":{
               "file":{
                  "type":"string",
                  "format":"binary",
                  "title":"File"
               },
               "global_spec":{
                  "type":"boolean",
                  "title":"Global Spec",
                  "default":false
               },
               "shared_security_info":{
                  "type":"boolean",
                  "title":"Shared Security Info",
                  "default":false
               },
               "create_mcp":{
                  "type":"boolean",
                  "title":"Create Mcp",
                  "default":false
               }
            },
            "type":"object",
            "required":[
               "file"
            ],
            "title":"Body_spec_create_from_file"
         },
         "Body_user_token":{
            "properties":{
               "grant_type":{
                  "anyOf":[
                     {
                        "type":"string",
                        "pattern":"^password$"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Grant Type"
               },
               "username":{
                  "type":"string",
                  "title":"Username"
               },
               "password":{
                  "type":"string",
                  "format":"password",
                  "title":"Password"
               },
               "scope":{
                  "type":"string",
                  "title":"Scope",
                  "default":""
               },
               "client_id":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Client Id"
               },
               "client_secret":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "format":"password",
                  "title":"Client Secret"
               }
            },
            "type":"object",
            "required":[
               "username",
               "password"
            ],
            "title":"Body_user_token"
         },
         "Category":{
            "type":"string",
            "enum":[
               "Sales",
               "Marketing",
               "Product & R&D",
               "HR",
               "Operation",
               "Finance",
               "Support",
               "Other"
            ],
            "title":"Category"
         },
         "Context":{
            "properties":{
               "id":{
                  "type":"string",
                  "title":"Id",
                  "description":"Unique identifier for the context"
               },
               "name":{
                  "type":"string",
                  "title":"Name",
                  "description":"Name of the context"
               },
               "description":{
                  "type":"string",
                  "title":"Description",
                  "description":"Description of the context"
               },
               "apps":{
                  "items":{
                     "type":"string"
                  },
                  "type":"array",
                  "title":"Apps",
                  "description":"List of associated apps",
                  "default":[
                     
                  ]
               },
               "created_by":{
                  "type":"string",
                  "title":"Created By",
                  "description":"User who created the context"
               },
               "created_at":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Created At",
                  "description":"The date and time when the context was created."
               },
               "updated_at":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Updated At",
                  "description":"The date and time when the context was last updated."
               }
            },
            "type":"object",
            "required":[
               "name",
               "description",
               "created_by"
            ],
            "title":"Context"
         },
         "ContextCreate":{
            "properties":{
               "name":{
                  "type":"string",
                  "title":"Name",
                  "description":"Name of the context"
               },
               "description":{
                  "type":"string",
                  "title":"Description",
                  "description":"Description of the context"
               },
               "apps":{
                  "items":{
                     "type":"string"
                  },
                  "type":"array",
                  "title":"Apps",
                  "description":"List of associated apps",
                  "default":[
                     
                  ]
               }
            },
            "type":"object",
            "required":[
               "name",
               "description"
            ],
            "title":"ContextCreate"
         },
         "ConversationAction":{
            "properties":{
               "api_name":{
                  "type":"string",
                  "title":"Api Name",
                  "description":"Name of the API."
               },
               "domain_url":{
                  "type":"string",
                  "title":"Domain Url",
                  "description":"API domain url."
               },
               "user_input":{
                  "type":"string",
                  "title":"User Input",
                  "description":"User input data."
               }
            },
            "type":"object",
            "required":[
               "api_name",
               "domain_url",
               "user_input"
            ],
            "title":"ConversationAction"
         },
         "ConversationStarter":{
            "properties":{
               "name":{
                  "type":"string",
                  "title":"Name",
                  "description":"Conversation name."
               },
               "action":{
                  "items":{
                     "$ref":"#/components/schemas/ConversationAction"
                  },
                  "type":"array",
                  "title":"Action"
               }
            },
            "type":"object",
            "required":[
               "name",
               "action"
            ],
            "title":"ConversationStarter"
         },
         "CreateLicenseRequest":{
            "properties":{
               "tenant_id":{
                  "type":"string",
                  "title":"Tenant Id"
               },
               "plan":{
                  "type":"string",
                  "title":"Plan",
                  "default":"enterprise"
               },
               "features":{
                  "$ref":"#/components/schemas/LicenseFeatures",
                  "default":{
                     "max_orgs_per_tenant":50,
                     "max_users_per_org":100,
                     "max_public_apis_per_tenant":50,
                     "max_private_apis_per_org":50
                  }
               },
               "expires_in_days":{
                  "anyOf":[
                     {
                        "type":"integer"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Expires In Days"
               },
               "issued_to":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Issued To"
               }
            },
            "type":"object",
            "required":[
               "tenant_id"
            ],
            "title":"CreateLicenseRequest"
         },
         "CreateLicenseResponse":{
            "properties":{
               "token":{
                  "type":"string",
                  "title":"Token"
               }
            },
            "type":"object",
            "required":[
               "token"
            ],
            "title":"CreateLicenseResponse"
         },
         "DecodeLicenseRequest":{
            "properties":{
               "token":{
                  "type":"string",
                  "title":"Token"
               }
            },
            "type":"object",
            "required":[
               "token"
            ],
            "title":"DecodeLicenseRequest"
         },
         "DecodeLicenseResponse":{
            "properties":{
               "claims":{
                  "additionalProperties":true,
                  "type":"object",
                  "title":"Claims"
               }
            },
            "type":"object",
            "required":[
               "claims"
            ],
            "title":"DecodeLicenseResponse"
         },
         "Details":{
            "properties":{
               "text":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Text",
                  "description":"Details text."
               },
               "link":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Link",
                  "description":"Details link."
               }
            },
            "type":"object",
            "title":"Details"
         },
         "ExecutionMode":{
            "type":"string",
            "enum":[
               "dry_run_execution",
               "apigene_execution",
               "customer_execution"
            ],
            "title":"ExecutionMode"
         },
         "GPT-Input":{
            "properties":{
               "index_name":{
                  "type":"string",
                  "title":"Index Name",
                  "description":"The index name of the custom GPT model."
               },
               "genai_app":{
                  "type":"string",
                  "title":"Genai App",
                  "description":"The name of the custom GPT model."
               },
               "created_by":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Created By",
                  "description":"The user who created the GPT."
               },
               "icon":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Icon",
                  "description":"Base64 string encoding of GPT icon."
               },
               "summary":{
                  "type":"string",
                  "title":"Summary",
                  "description":"A short liner about the GPT that will be present on the GPT store"
               },
               "description":{
                  "type":"string",
                  "title":"Description",
                  "description":"A description of the custom GPT model."
               },
               "instructions":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Instructions",
                  "description":"Instructions for ChatGPT on how to operate the custom GPT model."
               },
               "gpt_url":{
                  "anyOf":[
                     {
                        "items":{
                           "$ref":"#/components/schemas/StoreURL"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Gpt Url",
                  "description":"GPT url on it's installed appstore platform."
               },
               "apis":{
                  "items":{
                     "type":"string"
                  },
                  "type":"array",
                  "title":"Apis",
                  "description":"List of API names accessible to the custom GPT through GPT actions."
               },
               "appstore":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Appstore",
                  "description":"List of Gen AI appstores available to the custom GPT.",
                  "default":[
                     
                  ]
               },
               "categories":{
                  "anyOf":[
                     {
                        "items":{
                           "$ref":"#/components/schemas/Category"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Categories",
                  "description":"The type of GPT. private or public",
                  "default":[
                     "Other"
                  ]
               },
               "keywords":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Keywords",
                  "description":"Integration SEO related tags."
               },
               "partner_url":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Partner Url",
                  "description":"The partner's website URL"
               },
               "config":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/GPTConfig"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "description":"GPT configuration details."
               }
            },
            "type":"object",
            "required":[
               "index_name",
               "genai_app",
               "summary",
               "description",
               "apis"
            ],
            "title":"GPT"
         },
         "GPT-Output":{
            "properties":{
               "index_name":{
                  "type":"string",
                  "title":"Index Name",
                  "description":"The index name of the custom GPT model."
               },
               "genai_app":{
                  "type":"string",
                  "title":"Genai App",
                  "description":"The name of the custom GPT model."
               },
               "created_by":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Created By",
                  "description":"The user who created the GPT."
               },
               "icon":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Icon",
                  "description":"Base64 string encoding of GPT icon."
               },
               "summary":{
                  "type":"string",
                  "title":"Summary",
                  "description":"A short liner about the GPT that will be present on the GPT store"
               },
               "description":{
                  "type":"string",
                  "title":"Description",
                  "description":"A description of the custom GPT model."
               },
               "instructions":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Instructions",
                  "description":"Instructions for ChatGPT on how to operate the custom GPT model."
               },
               "gpt_url":{
                  "anyOf":[
                     {
                        "items":{
                           "$ref":"#/components/schemas/StoreURL"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Gpt Url",
                  "description":"GPT url on it's installed appstore platform."
               },
               "apis":{
                  "items":{
                     "type":"string"
                  },
                  "type":"array",
                  "title":"Apis",
                  "description":"List of API names accessible to the custom GPT through GPT actions."
               },
               "appstore":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Appstore",
                  "description":"List of Gen AI appstores available to the custom GPT.",
                  "default":[
                     
                  ]
               },
               "categories":{
                  "anyOf":[
                     {
                        "items":{
                           "$ref":"#/components/schemas/Category"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Categories",
                  "description":"The type of GPT. private or public",
                  "default":[
                     "Other"
                  ]
               },
               "keywords":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Keywords",
                  "description":"Integration SEO related tags."
               },
               "partner_url":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Partner Url",
                  "description":"The partner's website URL"
               },
               "config":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/GPTConfig"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "description":"GPT configuration details."
               }
            },
            "type":"object",
            "required":[
               "index_name",
               "genai_app",
               "summary",
               "description",
               "apis"
            ],
            "title":"GPT"
         },
         "GPTActionInput":{
            "properties":{
               "app_name":{
                  "type":"string",
                  "title":"App Name",
                  "description":"The identifier of the App to invoke."
               },
               "user_input":{
                  "type":"string",
                  "title":"User Input",
                  "description":"The natural language input describing the desired action."
               },
               "context":{
                  "anyOf":[
                     {
                        "additionalProperties":true,
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Context",
                  "description":"Contextual parameters for the action, including operationId and any required inputs."
               },
               "response_format":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Response Format",
                  "description":"Response format: 'raw' (default) or 'formatted_md'.",
                  "default":"raw"
               }
            },
            "type":"object",
            "required":[
               "app_name",
               "user_input"
            ],
            "title":"GPTActionInput",
            "description":"Input payload for triggering a GPT action. Contains the user's input and operation ID."
         },
         "GPTActionResponse":{
            "properties":{
               "message":{
                  "title":"Message",
                  "description":"The response message or result from the GPT action"
               }
            },
            "type":"object",
            "required":[
               "message"
            ],
            "title":"GPTActionResponse",
            "description":"Response model for a GPT action. Contains the message or result returned by the GPT action."
         },
         "GPTConfig":{
            "properties":{
               "gpt_type":{
                  "$ref":"#/components/schemas/GPTType",
                  "description":"Flag indicating whether the gpt belong to the tenant or it is a global one.",
                  "default":"private"
               },
               "gpt_url":{
                  "anyOf":[
                     {
                        "items":{
                           "$ref":"#/components/schemas/StoreURL"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Gpt Url",
                  "description":"GPT url on it's installed appstore platform."
               },
               "is_installed":{
                  "anyOf":[
                     {
                        "type":"boolean"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Is Installed",
                  "description":"Flag indicating whether the gpt is installed or not.",
                  "default":false
               }
            },
            "type":"object",
            "title":"GPTConfig"
         },
         "GPTType":{
            "type":"string",
            "enum":[
               "private",
               "public"
            ],
            "title":"GPTType"
         },
         "HTTPValidationError":{
            "properties":{
               "detail":{
                  "items":{
                     "$ref":"#/components/schemas/ValidationError"
                  },
                  "type":"array",
                  "title":"Detail"
               }
            },
            "type":"object",
            "title":"HTTPValidationError"
         },
         "IntegrationAssets":{
            "properties":{
               "videos":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Videos",
                  "description":"Integration videos."
               },
               "images":{
                  "items":{
                     "type":"string"
                  },
                  "type":"array",
                  "title":"Images",
                  "description":"Integration images."
               },
               "authentication_instructions":{
                  "anyOf":[
                     {
                        "items":{
                           "$ref":"#/components/schemas/APIInstructions"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Authentication Instructions",
                  "description":"URL for GPT API authentication instructions."
               }
            },
            "type":"object",
            "title":"IntegrationAssets"
         },
         "IntegrationDetails":{
            "properties":{
               "developer":{
                  "$ref":"#/components/schemas/Details",
                  "description":"Developer details."
               },
               "website":{
                  "$ref":"#/components/schemas/Details",
                  "description":"Website details."
               }
            },
            "type":"object",
            "required":[
               "developer",
               "website"
            ],
            "title":"IntegrationDetails"
         },
         "IntegrationModel":{
            "properties":{
               "state":{
                  "type":"string",
                  "title":"State",
                  "description":"Hold the integration state.",
                  "default":"draft"
               },
               "gpt_name":{
                  "type":"string",
                  "title":"Gpt Name",
                  "description":"The name of the gpt for the integration."
               },
               "installs":{
                  "additionalProperties":true,
                  "type":"object",
                  "title":"Installs",
                  "description":"Installation details.",
                  "default":"Less than 100"
               },
               "website_details":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/IntegrationWebsiteModel"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "description":"Website information for model."
               },
               "partner_info":{
                  "anyOf":[
                     {
                        "additionalProperties":true,
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Partner Info",
                  "description":"Client details of an official partner."
               }
            },
            "type":"object",
            "required":[
               "gpt_name"
            ],
            "title":"IntegrationModel"
         },
         "IntegrationWebsiteModel":{
            "properties":{
               "overview":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Overview",
                  "description":"Integration overview."
               },
               "tags":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Tags",
                  "description":"Integration SEO related tags."
               },
               "assets":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/IntegrationAssets"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "description":"Integration video and image assets."
               },
               "details":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/IntegrationDetails"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "description":"Integration details"
               }
            },
            "type":"object",
            "title":"IntegrationWebsiteModel"
         },
         "Interaction":{
            "properties":{
               "user_id":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"User Id",
                  "default":"N.A"
               },
               "app_name":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"App Name",
                  "default":"N.A"
               },
               "api_title":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Api Title",
                  "default":"N.A"
               },
               "api_name":{
                  "type":"string",
                  "title":"Api Name"
               },
               "user_input":{
                  "type":"string",
                  "title":"User Input"
               },
               "actions_result":{
                  "items":{
                     "$ref":"#/components/schemas/ActionResult"
                  },
                  "type":"array",
                  "title":"Actions Result"
               },
               "duration":{
                  "type":"number",
                  "title":"Duration"
               }
            },
            "additionalProperties":true,
            "type":"object",
            "required":[
               "api_name",
               "user_input",
               "actions_result",
               "duration"
            ],
            "title":"Interaction"
         },
         "InteractionCountResponse":{
            "properties":{
               "interactions":{
                  "items":{
                     "$ref":"#/components/schemas/InteractionMetadata"
                  },
                  "type":"array",
                  "title":"Interactions",
                  "description":"List of interaction metadata."
               },
               "count":{
                  "type":"integer",
                  "title":"Count",
                  "description":"Total number of interactions matching the query."
               }
            },
            "type":"object",
            "required":[
               "interactions",
               "count"
            ],
            "title":"InteractionCountResponse"
         },
         "InteractionInput":{
            "properties":{
               "api_name":{
                  "type":"string",
                  "title":"Api Name",
                  "description":"Name of the API."
               },
               "user_input":{
                  "type":"string",
                  "title":"User Input",
                  "description":"User input data."
               },
               "context":{
                  "additionalProperties":true,
                  "type":"object",
                  "title":"Context",
                  "description":"Additional context parameters that may include relevant info for the LLM"
               },
               "response_format":{
                  "type":"string",
                  "title":"Response Format",
                  "description":"Control the response format available option are raw / formatted_html / formatted_md / formatted_text",
                  "default":"raw"
               },
               "execution_mode":{
                  "$ref":"#/components/schemas/ExecutionMode",
                  "description":"Controls how the request is executed: dry_run_execution (returns request without sending), apigene_execution (Apigene handles execution with stored credentials), customer_execution (request is forwarded to customer's webhook where the customer is responsible for executing it with their own credentials)",
                  "default":"apigene_execution"
               },
               "customer_execution_context":{
                  "anyOf":[
                     {
                        "additionalProperties":true,
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Customer Execution Context",
                  "description":"Customer-specific context data for correlation and tracking in customer execution mode"
               },
               "model":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Model",
                  "description":"Overide the default model that will be used for executing this interaction"
               }
            },
            "type":"object",
            "required":[
               "api_name",
               "user_input"
            ],
            "title":"InteractionInput"
         },
         "InteractionMetadata":{
            "properties":{
               "_id":{
                  "type":"string",
                  "title":"Id",
                  "description":"Unique identifier for the interaction."
               },
               "user_id":{
                  "type":"string",
                  "title":"User Id",
                  "description":"User ID who created the interaction."
               },
               "api_name":{
                  "type":"string",
                  "title":"Api Name",
                  "description":"Name of the API."
               },
               "api_title":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Api Title",
                  "description":"Title of the API."
               },
               "user_input":{
                  "type":"string",
                  "title":"User Input",
                  "description":"User input text."
               },
               "created_at":{
                  "type":"string",
                  "title":"Created At",
                  "description":"Creation timestamp."
               },
               "duration":{
                  "type":"number",
                  "title":"Duration",
                  "description":"Duration of the interaction in seconds."
               },
               "status_code":{
                  "type":"integer",
                  "title":"Status Code",
                  "description":"HTTP status code of the response."
               },
               "response_size":{
                  "type":"integer",
                  "title":"Response Size",
                  "description":"Size of the response content in bytes."
               }
            },
            "type":"object",
            "required":[
               "_id",
               "user_id",
               "api_name",
               "user_input",
               "created_at",
               "duration",
               "status_code",
               "response_size"
            ],
            "title":"InteractionMetadata"
         },
         "LicenseFeatures":{
            "properties":{
               "max_orgs_per_tenant":{
                  "type":"integer",
                  "title":"Max Orgs Per Tenant",
                  "default":50
               },
               "max_users_per_org":{
                  "type":"integer",
                  "title":"Max Users Per Org",
                  "default":100
               },
               "max_public_apis_per_tenant":{
                  "type":"integer",
                  "title":"Max Public Apis Per Tenant",
                  "default":50
               },
               "max_private_apis_per_org":{
                  "type":"integer",
                  "title":"Max Private Apis Per Org",
                  "default":50
               }
            },
            "type":"object",
            "title":"LicenseFeatures"
         },
         "LicenseUpdateRequest":{
            "properties":{
               "new_license_token":{
                  "type":"string",
                  "title":"New License Token"
               }
            },
            "type":"object",
            "required":[
               "new_license_token"
            ],
            "title":"LicenseUpdateRequest"
         },
         "MCPActionInput":{
            "properties":{
               "app_name":{
                  "type":"string",
                  "title":"App Name",
                  "description":"The identifier of the App to invoke."
               },
               "user_input":{
                  "type":"string",
                  "title":"User Input",
                  "description":"The natural language input describing the desired action."
               },
               "context":{
                  "anyOf":[
                     {
                        "additionalProperties":true,
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Context",
                  "description":"Contextual parameters for the action, including operationId and any required inputs."
               },
               "response_format":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Response Format",
                  "description":"Response format: 'raw' (default) or 'formatted_md'.",
                  "default":"raw"
               },
               "customer_execution_context":{
                  "anyOf":[
                     {
                        "additionalProperties":true,
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Customer Execution Context",
                  "description":"Customer-specific context data for correlation and tracking in customer execution mode"
               }
            },
            "type":"object",
            "required":[
               "app_name",
               "user_input"
            ],
            "title":"MCPActionInput",
            "description":"Input payload for triggering a MCP action. Contains the user's input and operation ID."
         },
         "MCPActionResponse":{
            "properties":{
               "message":{
                  "title":"Message",
                  "description":"The response message or result from the MCP action"
               }
            },
            "type":"object",
            "required":[
               "message"
            ],
            "title":"MCPActionResponse",
            "description":"Response model for a MCP action. Contains the message or result returned by the MCP action."
         },
         "MCPContextNamesResponse":{
            "properties":{
               "context_names":{
                  "items":{
                     "type":"string"
                  },
                  "type":"array",
                  "title":"Context Names",
                  "description":"List of context names"
               }
            },
            "type":"object",
            "required":[
               "context_names"
            ],
            "title":"MCPContextNamesResponse",
            "description":"Response model for listing context names. Contains the list of context names."
         },
         "MCPContextResponse":{
            "properties":{
               "context":{
                  "$ref":"#/components/schemas/Context",
                  "description":"The context data"
               }
            },
            "type":"object",
            "required":[
               "context"
            ],
            "title":"MCPContextResponse",
            "description":"Response model for getting a specific context. Contains the context data."
         },
         "MCPCreateFromApiRequest":{
            "properties":{
               "api_name":{
                  "type":"string",
                  "title":"Api Name",
                  "description":"The name of the API to create MCP server from"
               }
            },
            "type":"object",
            "required":[
               "api_name"
            ],
            "title":"MCPCreateFromApiRequest",
            "description":"Request model for creating an MCP server from an API name."
         },
         "MCPInstructionsResponse":{
            "properties":{
               "instructions":{
                  "type":"string",
                  "title":"Instructions",
                  "description":"The formatted agent instructions"
               }
            },
            "type":"object",
            "required":[
               "instructions"
            ],
            "title":"MCPInstructionsResponse",
            "description":"Response model for MCP instructions. Contains the formatted instructions for the agent."
         },
         "MCPServer":{
            "properties":{
               "id":{
                  "type":"string",
                  "title":"Id",
                  "description":"Unique identifier for the MCP server"
               },
               "name":{
                  "type":"string",
                  "title":"Name",
                  "description":"Name of the MCP server"
               },
               "config":{
                  "$ref":"#/components/schemas/MCPServerConfig",
                  "description":"MCP server configuration"
               },
               "enabled":{
                  "type":"boolean",
                  "title":"Enabled",
                  "description":"Whether the MCP server is enabled"
               },
               "server_type":{
                  "$ref":"#/components/schemas/MCPServerType",
                  "description":"Type of MCP server (public/private)"
               },
               "created_at":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Created At",
                  "description":"When the MCP server was created"
               },
               "updated_at":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Updated At",
                  "description":"When the MCP server was last updated"
               },
               "created_by":{
                  "type":"string",
                  "format":"email",
                  "title":"Created By",
                  "description":"Email of the user who created the MCP server"
               },
               "icon_url":{
                  "type":"string",
                  "title":"Icon Url",
                  "description":"Icon URL of the MCP server for display",
                  "default":"apigene.ai"
               },
               "api_name":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Api Name",
                  "description":"API name for APIGENE type servers"
               },
               "global_spec":{
                  "anyOf":[
                     {
                        "type":"boolean"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Global Spec",
                  "description":"Whether this is a global spec for APIGENE type servers"
               }
            },
            "type":"object",
            "required":[
               "id",
               "name",
               "config",
               "enabled",
               "server_type",
               "created_at",
               "updated_at",
               "created_by"
            ],
            "title":"MCPServer",
            "description":"Response model for MCP server"
         },
         "MCPServerConfig":{
            "properties":{
               "url":{
                  "type":"string",
                  "title":"Url",
                  "description":"MCP server URL"
               },
               "headers":{
                  "anyOf":[
                     {
                        "additionalProperties":{
                           "type":"string"
                        },
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Headers",
                  "description":"Additional headers for MCP server requests"
               }
            },
            "type":"object",
            "required":[
               "url"
            ],
            "title":"MCPServerConfig",
            "description":"MCP Server configuration"
         },
         "MCPServerCreate":{
            "properties":{
               "name":{
                  "type":"string",
                  "title":"Name",
                  "description":"Name of the MCP server"
               },
               "config":{
                  "$ref":"#/components/schemas/MCPServerConfig",
                  "description":"MCP server configuration"
               },
               "enabled":{
                  "type":"boolean",
                  "title":"Enabled",
                  "description":"Whether the MCP server is enabled",
                  "default":true
               },
               "server_type":{
                  "$ref":"#/components/schemas/MCPServerType",
                  "description":"Type of MCP server (apigene/public)",
                  "default":"apigene"
               },
               "icon_url":{
                  "type":"string",
                  "title":"Icon Url",
                  "description":"icon URL of the MCP server for display",
                  "default":"apigene.ai"
               },
               "api_name":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Api Name",
                  "description":"API name for APIGENE type servers"
               },
               "global_spec":{
                  "anyOf":[
                     {
                        "type":"boolean"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Global Spec",
                  "description":"Whether this is a global spec for APIGENE type servers"
               }
            },
            "type":"object",
            "required":[
               "name",
               "config"
            ],
            "title":"MCPServerCreate",
            "description":"Request model for creating an MCP server"
         },
         "MCPServerType":{
            "type":"string",
            "enum":[
               "apigene",
               "public"
            ],
            "title":"MCPServerType",
            "description":"MCP Server visibility types"
         },
         "MCPServerUpdate":{
            "properties":{
               "name":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Name",
                  "description":"Name of the MCP server"
               },
               "config":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/MCPServerConfig"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "description":"MCP server configuration"
               },
               "enabled":{
                  "anyOf":[
                     {
                        "type":"boolean"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Enabled",
                  "description":"Whether the MCP server is enabled"
               },
               "server_type":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/MCPServerType"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "description":"Type of MCP server (public/private)"
               },
               "icon_url":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Icon Url",
                  "description":"Icon URL of the MCP server for display"
               }
            },
            "type":"object",
            "title":"MCPServerUpdate",
            "description":"Request model for updating an MCP server"
         },
         "ModelConfig":{
            "properties":{
               "id":{
                  "type":"string",
                  "title":"Id",
                  "description":"Unique identifier for the model entry"
               },
               "provider":{
                  "type":"string",
                  "title":"Provider",
                  "description":"Provider name, e.g., openai, anthropic, bedrock"
               },
               "apiKey":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Apikey",
                  "description":"API key for authentication, not required for bedrock"
               },
               "baseURL":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Baseurl",
                  "description":"Base URL for API calls, optional for bedrock"
               },
               "model":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Model",
                  "description":"Model name or ID"
               },
               "modelVersion":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Modelversion",
                  "description":"Version or variant of the model"
               },
               "modelSettings":{
                  "additionalProperties":{
                     "anyOf":[
                        {
                           "type":"number"
                        },
                        {
                           "type":"null"
                        }
                     ]
                  },
                  "type":"object",
                  "title":"Modelsettings",
                  "description":"Configuration for inference (e.g., maxTokens, temperature)"
               },
               "headers":{
                  "anyOf":[
                     {
                        "additionalProperties":{
                           "type":"string"
                        },
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Headers"
               },
               "queryParams":{
                  "anyOf":[
                     {
                        "additionalProperties":{
                           "type":"string"
                        },
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Queryparams"
               },
               "providerSpecificOptions":{
                  "anyOf":[
                     {
                        "additionalProperties":{
                           "anyOf":[
                              {
                                 "type":"string"
                              },
                              {
                                 "type":"null"
                              }
                           ]
                        },
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Providerspecificoptions"
               }
            },
            "type":"object",
            "required":[
               "id",
               "provider"
            ],
            "title":"ModelConfig"
         },
         "ModelRegistry":{
            "properties":{
               "selected":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Selected",
                  "description":"The ID of the selected model"
               },
               "available_models":{
                  "items":{
                     "$ref":"#/components/schemas/ModelConfig"
                  },
                  "type":"array",
                  "title":"Available Models"
               }
            },
            "type":"object",
            "title":"ModelRegistry"
         },
         "OrgSettings":{
            "properties":{
               "proxy_server_url":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Proxy Server Url"
               },
               "model_registry":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/ModelRegistry"
                     },
                     {
                        "type":"null"
                     }
                  ]
               },
               "product_visual_settings":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/ProductVisualSettings"
                     },
                     {
                        "type":"null"
                     }
                  ]
               },
               "webhook_config":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/WebhookConfig"
                     },
                     {
                        "type":"null"
                     }
                  ]
               }
            },
            "type":"object",
            "title":"OrgSettings"
         },
         "OrganizationTier":{
            "type":"string",
            "enum":[
               "free",
               "pro",
               "enterprise",
               "enterprise_onprem",
               "apigene"
            ],
            "title":"OrganizationTier"
         },
         "PersonalContext":{
            "properties":{
               "name":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Name",
                  "description":"Name"
               },
               "position":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Position",
                  "description":"Position"
               },
               "traits":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Traits",
                  "description":"Traits"
               },
               "additional_personalization":{
                  "anyOf":[
                     {
                        "items":{
                           "additionalProperties":true,
                           "type":"object"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Additional Personalization",
                  "description":"Additional personalization"
               }
            },
            "type":"object",
            "required":[
               "name",
               "position",
               "traits",
               "additional_personalization"
            ],
            "title":"PersonalContext"
         },
         "ProductVisualSettings":{
            "properties":{
               "sidebar_icon":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Sidebar Icon",
                  "description":"The icon of that will be displayed in the sidebar"
               },
               "product_name":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Product Name",
                  "description":"The name of the product"
               },
               "copilot_icon":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Copilot Icon",
                  "description":"The icon of that will be displayed in the copilot"
               },
               "copilot_welcome_text":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Copilot Welcome Text",
                  "description":"The welcome text for the copilot"
               },
               "copilot_welcome_image":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Copilot Welcome Image",
                  "description":"The welcome image for the copilot"
               }
            },
            "type":"object",
            "title":"ProductVisualSettings"
         },
         "Schedule":{
            "properties":{
               "frequency":{
                  "$ref":"#/components/schemas/ScheduleFrequency",
                  "description":"Schedule frequency: 'daily' or 'weekly'"
               },
               "hour":{
                  "type":"string",
                  "title":"Hour",
                  "description":"Hour of the day in 4 digit format to run the task",
                  "default":"00:00"
               },
               "day":{
                  "type":"string",
                  "title":"Day",
                  "description":"Day of the week to run the task",
                  "default":"Monday"
               }
            },
            "type":"object",
            "required":[
               "frequency"
            ],
            "title":"Schedule"
         },
         "ScheduleFrequency":{
            "type":"string",
            "enum":[
               "manual",
               "daily",
               "weekly"
            ],
            "title":"ScheduleFrequency"
         },
         "SelectedSpecs":{
            "properties":{
               "api_name":{
                  "type":"string",
                  "title":"Api Name",
                  "description":"Name of the API."
               },
               "domain_url":{
                  "type":"string",
                  "title":"Domain Url",
                  "description":"API domain url."
               }
            },
            "type":"object",
            "required":[
               "api_name",
               "domain_url"
            ],
            "title":"SelectedSpecs"
         },
         "Settings":{
            "properties":{
               "conversation_starters":{
                  "anyOf":[
                     {
                        "items":{
                           "$ref":"#/components/schemas/ConversationStarter"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Conversation Starters",
                  "description":"conversational starters."
               },
               "dark_mode":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Dark Mode",
                  "description":"User dark mode information."
               },
               "personal_context":{
                  "anyOf":[
                     {
                        "$ref":"#/components/schemas/PersonalContext"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "description":"User personal context information."
               }
            },
            "type":"object",
            "title":"Settings"
         },
         "SpecExamplePayload":{
            "properties":{
               "operations_name":{
                  "items":{
                     "type":"string"
                  },
                  "type":"array",
                  "title":"Operations Name",
                  "description":"The name of the operation for which examples are to be generated."
               },
               "context":{
                  "additionalProperties":true,
                  "type":"object",
                  "title":"Context",
                  "description":"Additional context parameters that may include relevant info for the LLM"
               },
               "count":{
                  "type":"integer",
                  "title":"Count",
                  "description":"The number of examples to generate.",
                  "default":5
               },
               "index":{
                  "type":"boolean",
                  "title":"Index",
                  "description":"Flag indicating whether to use the generated examples to index.",
                  "default":false
               },
               "force":{
                  "type":"boolean",
                  "title":"Force",
                  "description":"Flag indicating whether to force re-generation of examples.",
                  "default":false
               }
            },
            "type":"object",
            "title":"SpecExamplePayload",
            "description":"Payload model for generating examples for a specific operation of the specified spec."
         },
         "SpecFromUrlData":{
            "properties":{
               "url":{
                  "type":"string",
                  "title":"Url"
               },
               "global_spec":{
                  "type":"boolean",
                  "title":"Global Spec",
                  "default":false
               },
               "shared_security_info":{
                  "type":"boolean",
                  "title":"Shared Security Info",
                  "default":false
               },
               "create_mcp":{
                  "type":"boolean",
                  "title":"Create Mcp",
                  "default":false
               }
            },
            "type":"object",
            "required":[
               "url"
            ],
            "title":"SpecFromUrlData",
            "description":"Request body model for creating spec from URL."
         },
         "SpecInfo":{
            "properties":{
               "api_title":{
                  "type":"string",
                  "title":"Api Title",
                  "description":"The title of the API."
               },
               "api_name":{
                  "type":"string",
                  "title":"Api Name",
                  "description":"The name of the API."
               },
               "api_version":{
                  "type":"string",
                  "title":"Api Version",
                  "description":"The version of the API."
               },
               "domain_url":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Domain Url",
                  "description":"The domain URL of the API."
               },
               "server_url":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Server Url",
                  "description":"The server URL of the API."
               },
               "server_url_options":{
                  "anyOf":[
                     {
                        "items":{
                           "type":"string"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Server Url Options",
                  "description":"A list of available server URLs for the API."
               },
               "examples":{
                  "anyOf":[
                     {
                        "items":{
                           
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Examples",
                  "description":"List of examples associated with the API."
               },
               "llm_summary":{
                  "anyOf":[
                     {
                        "additionalProperties":true,
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Llm Summary",
                  "description":"Summary information generated by LLM (Large Language Model)."
               },
               "llm_app_categories":{
                  "anyOf":[
                     {
                        "additionalProperties":true,
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Llm App Categories",
                  "description":"App categories generated by the LLM."
               },
               "llm_use_cases_content":{
                  "anyOf":[
                     {
                        "items":{
                           
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Llm Use Cases Content",
                  "description":"Use case generated by the LLM."
               },
               "created_by":{
                  "type":"string",
                  "format":"email",
                  "title":"Created By",
                  "description":"Email address of the user who created the spec."
               },
               "created_at":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Created At",
                  "description":"The date and time when the spec was created."
               },
               "updated_at":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Updated At",
                  "description":"The date and time when the spec was last updated."
               },
               "security_info":{
                  "anyOf":[
                     {
                        "additionalProperties":true,
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Security Info",
                  "description":"Information about the security configurations of the API."
               },
               "security_info_configured":{
                  "type":"boolean",
                  "title":"Security Info Configured",
                  "description":"Flag indicating whether the security information is configured.",
                  "default":false
               },
               "operations_state":{
                  "anyOf":[
                     {
                        "additionalProperties":true,
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Operations State",
                  "description":"Information about the state of each operation the spec. support."
               },
               "operations_total_count":{
                  "anyOf":[
                     {
                        "type":"integer"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Operations Total Count",
                  "description":"Total number of operations the spec. support.",
                  "default":0
               },
               "operations_enabled_count":{
                  "anyOf":[
                     {
                        "type":"integer"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Operations Enabled Count",
                  "description":"Number of operations that are enabled.",
                  "default":0
               },
               "common_parameters":{
                  "anyOf":[
                     {
                        "additionalProperties":true,
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Common Parameters",
                  "description":"Name and values of common parameters used in the spec."
               },
               "user_input_templates":{
                  "anyOf":[
                     {
                        "additionalProperties":true,
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"User Input Templates",
                  "description":"User input templates for the operations."
               },
               "global_spec":{
                  "anyOf":[
                     {
                        "type":"boolean"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Global Spec",
                  "description":"Flag indicating whether the spec belong to the tenant or it is a global one.",
                  "default":false
               },
               "shared_security_info":{
                  "anyOf":[
                     {
                        "type":"boolean"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Shared Security Info",
                  "description":"Flag indicating whether the spec uses shared security info (global specs only).",
                  "default":false
               },
               "agentic_metadata":{
                  "anyOf":[
                     {
                        "items":{
                           "additionalProperties":true,
                           "type":"object"
                        },
                        "type":"array"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Agentic Metadata",
                  "description":"The agentic metadata of the spec."
               }
            },
            "type":"object",
            "required":[
               "api_title",
               "api_name",
               "api_version",
               "created_by"
            ],
            "title":"SpecInfo",
            "description":"Model representing information about a spec."
         },
         "SpecOperationAddExamplesPayload":{
            "properties":{
               "operation_name":{
                  "type":"string",
                  "title":"Operation Name",
                  "description":"The name of the operation for which examples are to be generated."
               },
               "user_inputs":{
                  "items":{
                     "type":"string"
                  },
                  "type":"array",
                  "title":"User Inputs",
                  "description":"The user input to be indexed."
               }
            },
            "type":"object",
            "title":"SpecOperationAddExamplesPayload",
            "description":"Payload model for generating examples for a specific operation of the specified spec."
         },
         "SpecReindexPayload":{
            "properties":{
               "drop":{
                  "type":"boolean",
                  "title":"Drop",
                  "description":"Flag indicating whether to drop existing indices before reindexing.",
                  "default":false
               }
            },
            "type":"object",
            "title":"SpecReindexPayload",
            "description":"Payload model for reindexing a specific spec."
         },
         "SpecSummaryPayload":{
            "properties":{
               "force":{
                  "type":"boolean",
                  "title":"Force",
                  "default":false
               }
            },
            "type":"object",
            "title":"SpecSummaryPayload"
         },
         "SpecUseCasesPayload":{
            "properties":{
               "force":{
                  "type":"boolean",
                  "title":"Force",
                  "default":false
               },
               "use_case_count":{
                  "type":"integer",
                  "title":"Use Case Count",
                  "default":5
               },
               "personas":{
                  "type":"string",
                  "title":"Personas"
               },
               "use_case_context":{
                  "type":"string",
                  "title":"Use Case Context"
               }
            },
            "type":"object",
            "title":"SpecUseCasesPayload"
         },
         "State":{
            "type":"string",
            "enum":[
               "draft",
               "published",
               "rejected",
               "in_review"
            ],
            "title":"State"
         },
         "StoreURL":{
            "properties":{
               "appstore":{
                  "type":"string",
                  "title":"Appstore",
                  "description":"GPT appstore name."
               },
               "url":{
                  "type":"string",
                  "title":"Url",
                  "description":"GPT url on appstore platform."
               }
            },
            "type":"object",
            "required":[
               "appstore",
               "url"
            ],
            "title":"StoreURL"
         },
         "SummaryRequest":{
            "properties":{
               "summary_type":{
                  "type":"string",
                  "pattern":"^(api_usage|action_breakdown)$",
                  "title":"Summary Type",
                  "default":"api_usage"
               },
               "time_frame":{
                  "anyOf":[
                     {
                        "type":"string",
                        "pattern":"^(hourly|daily|weekly|monthly)$"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Time Frame",
                  "default":"daily"
               },
               "start_date":{
                  "anyOf":[
                     {
                        "type":"string",
                        "format":"date-time"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Start Date"
               },
               "end_date":{
                  "anyOf":[
                     {
                        "type":"string",
                        "format":"date-time"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"End Date"
               },
               "api_title":{
                  "items":{
                     "type":"string"
                  },
                  "type":"array",
                  "title":"Api Title"
               }
            },
            "type":"object",
            "title":"SummaryRequest"
         },
         "Task":{
            "properties":{
               "id":{
                  "type":"string",
                  "title":"Id",
                  "description":"Unique identifier for the task"
               },
               "name":{
                  "type":"string",
                  "title":"Name",
                  "description":"The Task name."
               },
               "actions":{
                  "items":{
                     "$ref":"#/components/schemas/TaskAction"
                  },
                  "type":"array",
                  "title":"Actions"
               },
               "created_by":{
                  "type":"string",
                  "title":"Created By",
                  "description":"User who created the task"
               },
               "visibility":{
                  "$ref":"#/components/schemas/Visibility",
                  "description":"Task visibility: 'private' (default) or 'public'",
                  "default":"private"
               },
               "initial_input":{
                  "type":"string",
                  "title":"Initial Input",
                  "description":"The initial user input for the task, default is None"
               },
               "schedule":{
                  "$ref":"#/components/schemas/Schedule",
                  "description":"Optional schedule information for the task",
                  "default":{
                     "frequency":"manual",
                     "hour":"00:00",
                     "day":"Monday"
                  }
               },
               "state":{
                  "$ref":"#/components/schemas/TaskState",
                  "description":"Task state: 'enabled' (default) or 'disabled'",
                  "default":"enabled"
               },
               "category":{
                  "type":"string",
                  "title":"Category",
                  "description":"Task category",
                  "default":"Other"
               },
               "next_run":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Next Run",
                  "description":"Next scheduled execution time (UTC)",
                  "default_":"1970-01-01T00:00:00"
               }
            },
            "type":"object",
            "required":[
               "name",
               "actions",
               "created_by",
               "next_run"
            ],
            "title":"Task"
         },
         "TaskAction":{
            "properties":{
               "api_name":{
                  "type":"string",
                  "title":"Api Name",
                  "description":"Name of the API."
               },
               "domain_url":{
                  "type":"string",
                  "title":"Domain Url",
                  "description":"API domain URL.",
                  "default":""
               },
               "user_input":{
                  "type":"string",
                  "title":"User Input",
                  "description":"User input data."
               }
            },
            "type":"object",
            "required":[
               "api_name",
               "user_input"
            ],
            "title":"TaskAction"
         },
         "TaskCreate-Input":{
            "properties":{
               "name":{
                  "type":"string",
                  "title":"Name",
                  "description":"The Task name."
               },
               "actions":{
                  "items":{
                     "$ref":"#/components/schemas/TaskAction"
                  },
                  "type":"array",
                  "title":"Actions"
               },
               "visibility":{
                  "$ref":"#/components/schemas/Visibility",
                  "description":"Task visibility: 'private' (default) or 'public'",
                  "default":"private"
               },
               "initial_input":{
                  "type":"string",
                  "title":"Initial Input",
                  "description":"The initial user input for the task, default is None"
               },
               "schedule":{
                  "$ref":"#/components/schemas/Schedule",
                  "description":"Optional schedule information for the task",
                  "default":{
                     "frequency":"manual",
                     "hour":"00:00",
                     "day":"Monday"
                  }
               },
               "state":{
                  "$ref":"#/components/schemas/TaskState",
                  "description":"Task state: 'enabled' (default) or 'disabled'",
                  "default":"enabled"
               },
               "category":{
                  "type":"string",
                  "title":"Category",
                  "description":"Task category",
                  "default":"Other"
               }
            },
            "type":"object",
            "required":[
               "name",
               "actions"
            ],
            "title":"TaskCreate"
         },
         "TaskCreate-Output":{
            "properties":{
               "name":{
                  "type":"string",
                  "title":"Name",
                  "description":"The Task name."
               },
               "actions":{
                  "items":{
                     "$ref":"#/components/schemas/TaskAction"
                  },
                  "type":"array",
                  "title":"Actions"
               },
               "visibility":{
                  "$ref":"#/components/schemas/Visibility",
                  "description":"Task visibility: 'private' (default) or 'public'",
                  "default":"private"
               },
               "initial_input":{
                  "type":"string",
                  "title":"Initial Input",
                  "description":"The initial user input for the task, default is None"
               },
               "schedule":{
                  "$ref":"#/components/schemas/Schedule",
                  "description":"Optional schedule information for the task",
                  "default":{
                     "frequency":"manual",
                     "hour":"00:00",
                     "day":"Monday"
                  }
               },
               "state":{
                  "$ref":"#/components/schemas/TaskState",
                  "description":"Task state: 'enabled' (default) or 'disabled'",
                  "default":"enabled"
               },
               "category":{
                  "type":"string",
                  "title":"Category",
                  "description":"Task category",
                  "default":"Other"
               }
            },
            "type":"object",
            "required":[
               "name",
               "actions"
            ],
            "title":"TaskCreate"
         },
         "TaskGenerate":{
            "properties":{
               "instruction":{
                  "type":"string",
                  "title":"Instruction",
                  "description":"Instruction."
               },
               "specs":{
                  "items":{
                     "$ref":"#/components/schemas/SelectedSpecs"
                  },
                  "type":"array",
                  "title":"Specs",
                  "description":"Selected API specs."
               }
            },
            "type":"object",
            "required":[
               "instruction",
               "specs"
            ],
            "title":"TaskGenerate"
         },
         "TaskOutcome":{
            "properties":{
               "id":{
                  "type":"string",
                  "title":"Id",
                  "description":"The task ID"
               },
               "name":{
                  "type":"string",
                  "title":"Name",
                  "description":"The name of the task"
               },
               "started_at":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Started At",
                  "description":"The time the task execution started"
               },
               "completed_at":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Completed At",
                  "description":"The time the task execution completed"
               },
               "result":{
                  "type":"string",
                  "title":"Result",
                  "description":"The result of the task execution"
               },
               "status":{
                  "type":"string",
                  "title":"Status",
                  "description":"'completed' if all actions succeeded, else 'failed'"
               }
            },
            "type":"object",
            "required":[
               "id",
               "name",
               "started_at",
               "completed_at",
               "result",
               "status"
            ],
            "title":"TaskOutcome"
         },
         "TaskState":{
            "type":"string",
            "enum":[
               "disabled",
               "enabled"
            ],
            "title":"TaskState"
         },
         "TenantSetupRequest":{
            "properties":{
               "license_token":{
                  "type":"string",
                  "title":"License Token"
               },
               "admin_email":{
                  "type":"string",
                  "format":"email",
                  "title":"Admin Email"
               },
               "admin_name":{
                  "type":"string",
                  "title":"Admin Name"
               },
               "admin_password":{
                  "type":"string",
                  "title":"Admin Password"
               }
            },
            "type":"object",
            "required":[
               "license_token",
               "admin_email",
               "admin_name",
               "admin_password"
            ],
            "title":"TenantSetupRequest"
         },
         "TenantSetupResponse":{
            "properties":{
               "message":{
                  "type":"string",
                  "title":"Message"
               },
               "tenant_org_token":{
                  "type":"string",
                  "title":"Tenant Org Token"
               }
            },
            "type":"object",
            "required":[
               "message",
               "tenant_org_token"
            ],
            "title":"TenantSetupResponse"
         },
         "Token":{
            "properties":{
               "access_token":{
                  "type":"string",
                  "title":"Access Token"
               },
               "token_type":{
                  "type":"string",
                  "title":"Token Type",
                  "default":"bearer"
               }
            },
            "type":"object",
            "required":[
               "access_token"
            ],
            "title":"Token"
         },
         "UserCreate":{
            "properties":{
               "org_name":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Org Name"
               },
               "email":{
                  "type":"string",
                  "format":"email",
                  "title":"Email"
               },
               "password":{
                  "type":"string",
                  "title":"Password"
               },
               "role":{
                  "$ref":"#/components/schemas/UserRole",
                  "default":"User"
               }
            },
            "type":"object",
            "required":[
               "email",
               "password"
            ],
            "title":"UserCreate"
         },
         "UserInfo":{
            "properties":{
               "email":{
                  "type":"string",
                  "format":"email",
                  "title":"Email"
               },
               "role":{
                  "$ref":"#/components/schemas/UserRole",
                  "default":"User"
               },
               "org_name":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Org Name"
               },
               "org_id":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Org Id"
               },
               "name":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Name"
               },
               "last_login":{
                  "anyOf":[
                     {
                        "type":"string",
                        "format":"date-time"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Last Login"
               },
               "photo_url":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Photo Url"
               },
               "created_at":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Created At"
               },
               "updated_at":{
                  "type":"string",
                  "format":"date-time",
                  "title":"Updated At"
               },
               "onboarding_completed":{
                  "anyOf":[
                     {
                        "type":"boolean"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Onboarding Completed",
                  "default":true
               },
               "trial_expire_in":{
                  "anyOf":[
                     {
                        "type":"integer"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Trial Expire In"
               },
               "features":{
                  "anyOf":[
                     {
                        "additionalProperties":true,
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Features"
               }
            },
            "type":"object",
            "required":[
               "email"
            ],
            "title":"UserInfo"
         },
         "UserRole":{
            "type":"string",
            "enum":[
               "APIGene",
               "Owner",
               "Admin",
               "User"
            ],
            "title":"UserRole"
         },
         "ValidationError":{
            "properties":{
               "loc":{
                  "items":{
                     "anyOf":[
                        {
                           "type":"string"
                        },
                        {
                           "type":"integer"
                        }
                     ]
                  },
                  "type":"array",
                  "title":"Location"
               },
               "msg":{
                  "type":"string",
                  "title":"Message"
               },
               "type":{
                  "type":"string",
                  "title":"Error Type"
               }
            },
            "type":"object",
            "required":[
               "loc",
               "msg",
               "type"
            ],
            "title":"ValidationError"
         },
         "Visibility":{
            "type":"string",
            "enum":[
               "private",
               "public"
            ],
            "title":"Visibility"
         },
         "WebhookConfig":{
            "properties":{
               "url":{
                  "anyOf":[
                     {
                        "type":"string"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Url",
                  "description":"The webhook URL where the request will be sent"
               },
               "headers":{
                  "anyOf":[
                     {
                        "additionalProperties":{
                           "type":"string"
                        },
                        "type":"object"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Headers",
                  "description":"Additional headers to include in the webhook request"
               },
               "connect_timeout":{
                  "anyOf":[
                     {
                        "type":"integer"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Connect Timeout",
                  "description":"Connect Timeout in seconds for the webhook request",
                  "default":30
               },
               "read_timeout":{
                  "anyOf":[
                     {
                        "type":"integer"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Read Timeout",
                  "description":"Read Timeout in seconds for the webhook request",
                  "default":30
               },
               "retry_count":{
                  "anyOf":[
                     {
                        "type":"integer"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Retry Count",
                  "description":"Number of retry attempts if webhook fails",
                  "default":2
               },
               "retry_delay":{
                  "anyOf":[
                     {
                        "type":"integer"
                     },
                     {
                        "type":"null"
                     }
                  ],
                  "title":"Retry Delay",
                  "description":"Delay in seconds between retry attempts",
                  "default":5
               }
            },
            "type":"object",
            "title":"WebhookConfig",
            "description":"Configuration for webhook execution"
         }
      },
      "securitySchemes":{
         "BearerAuth":{
            "type":"http",
            "scheme":"bearer",
            "bearerFormat":"JWT",
            "description":"JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer {token}'"
         }
      }
   },
   "servers":[
      {
         "url":"https://app.apigene.ai"
      }
   ],
   "security":[
      {
         "BearerAuth":[
            
         ]
      }
   ]
}